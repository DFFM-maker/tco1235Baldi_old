[
	{
		"id": "d34333c5.293d8",
		"type": "tab",
		"label": "Main",
		"disabled": false,
		"info": ""
	},
	{
		"id": "31a13872.0bad28",
		"type": "tab",
		"label": "Write_to_OPCUA",
		"disabled": false,
		"info": ""
	},
	{
		"id": "b954fe2b.6f2d4",
		"type": "tab",
		"label": "DistributionRowsALM",
		"disabled": false,
		"info": ""
	},
	{
		"id": "8ad94bc0.3a5ef8",
		"type": "tab",
		"label": "FlowPack_ALM",
		"disabled": false,
		"info": ""
	},
	{
		"id": "adfd884d.ed9118",
		"type": "tab",
		"label": "FillingUnit_alm",
		"disabled": false,
		"info": ""
	},
	{
		"id": "864446f5.ece2d8",
		"type": "tab",
		"label": "CartoningMachine_ALM",
		"disabled": false,
		"info": ""
	},
	{
		"id": "498f2a1d.a820e4",
		"type": "tab",
		"label": "TwinMachineALM",
		"disabled": false,
		"info": ""
	},
	{
		"id": "47b2f5dd.b4683c",
		"type": "tab",
		"label": "CartoningMachine_Data_Output",
		"disabled": false,
		"info": ""
	},
	{
		"id": "e2174f3.a10d5b",
		"type": "tab",
		"label": "FillingUnit_Data_Out",
		"disabled": false,
		"info": ""
	},
	{
		"id": "b07f076e.8de3b8",
		"type": "tab",
		"label": "FlowPack_Data_Out",
		"disabled": false,
		"info": ""
	},
	{
		"id": "22eda08c.8fdef",
		"type": "tab",
		"label": "TwinMachine_Data_Out",
		"disabled": false,
		"info": ""
	},
	{
		"id": "6745f1f9.68b0a",
		"type": "tab",
		"label": "DIstributionRows_Data_Out",
		"disabled": false,
		"info": ""
	},
	{
		"id": "63021cb6.557b64",
		"type": "ui_base",
		"theme": {
			"name": "theme-custom",
			"lightTheme": {
				"default": "#0094CE",
				"baseColor": "#0094CE",
				"baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
				"edited": true,
				"reset": false
			},
			"darkTheme": {
				"default": "#097479",
				"baseColor": "#097479",
				"baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
				"edited": false
			},
			"customTheme": {
				"name": "Untitled Theme 1",
				"default": "#4B7930",
				"baseColor": "#4B7930",
				"baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
				"reset": false
			},
			"themeState": {
				"base-color": {
					"default": "#4B7930",
					"value": "#4B7930",
					"edited": false
				},
				"page-titlebar-backgroundColor": {
					"value": "#4B7930",
					"edited": false
				},
				"page-backgroundColor": {
					"value": "#111111",
					"edited": false
				},
				"page-sidebar-backgroundColor": {
					"value": "#000000",
					"edited": false
				},
				"group-textColor": {
					"value": "#6db046",
					"edited": false
				},
				"group-borderColor": {
					"value": "#555555",
					"edited": false
				},
				"group-backgroundColor": {
					"value": "#333333",
					"edited": false
				},
				"widget-textColor": {
					"value": "#eeeeee",
					"edited": false
				},
				"widget-backgroundColor": {
					"value": "#4b7930",
					"edited": false
				},
				"widget-borderColor": {
					"value": "#333333",
					"edited": false
				},
				"base-font": {
					"value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
				}
			},
			"angularTheme": {
				"primary": "indigo",
				"accents": "blue",
				"warn": "red",
				"background": "grey"
			}
		},
		"site": {
			"name": "Tecno Pack DashBoard",
			"hideToolbar": "false",
			"allowSwipe": "false",
			"lockMenu": "true",
			"allowTempTheme": "false",
			"dateFormat": "DD/MM/YYYY",
			"sizes": {
				"sx": 48,
				"sy": 48,
				"gx": 6,
				"gy": 6,
				"cx": 6,
				"cy": 6,
				"px": 0,
				"py": 0
			}
		}
	},
	{
		"id": "4ee7c0a.704fe4",
		"type": "ui_group",
		"z": "",
		"name": "2.1",
		"tab": "",
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "46dc1136.b999c",
		"type": "ui_group",
		"z": "",
		"name": "RealTime",
		"tab": "",
		"order": 1,
		"disp": true,
		"width": "9",
		"collapse": true
	},
	{
		"id": "1bba0364.8912bd",
		"type": "ui_group",
		"z": "",
		"name": "Garage",
		"tab": "",
		"order": 2,
		"disp": false,
		"width": "10",
		"collapse": false
	},
	{
		"id": "e446f1b.4f7831",
		"type": "ui_group",
		"z": "",
		"name": "Input Data",
		"tab": "",
		"order": 1,
		"disp": false,
		"width": "24",
		"collapse": false
	},
	{
		"id": "f84923f6.07253",
		"type": "ui_group",
		"z": "",
		"name": "Default",
		"tab": "",
		"order": 1,
		"disp": false,
		"width": "24",
		"collapse": false
	},
	{
		"id": "df8ffdf2.3963f",
		"type": "ui_group",
		"z": "",
		"name": "Default",
		"tab": "",
		"order": 1,
		"disp": false,
		"width": "24",
		"collapse": false
	},
	{
		"id": "683a1efc.49f27",
		"type": "ui_group",
		"z": "",
		"name": "Dati",
		"tab": "",
		"order": 3,
		"disp": true,
		"width": "10",
		"collapse": false
	},
	{
		"id": "8e2b7a09.8c9818",
		"type": "ui_group",
		"z": "",
		"name": "Graph",
		"tab": "",
		"order": 1,
		"disp": true,
		"width": "8",
		"collapse": false
	},
	{
		"id": "bf2db24b.6e1e7",
		"type": "OPCUA-IIoT-Connector",
		"z": "",
		"discoveryUrl": "",
		"endpoint": "opc.tcp://192.168.1.237:4840",
		"keepSessionAlive": true,
		"loginEnabled": false,
		"securityPolicy": "None",
		"securityMode": "NONE",
		"name": "OPCUA_Baldi",
		"showErrors": false,
		"individualCerts": false,
		"publicCertificateFile": "",
		"privateKeyFile": "",
		"defaultSecureTokenLifetime": "",
		"endpointMustExist": false,
		"autoSelectRightEndpoint": false,
		"strategyMaxRetry": "",
		"strategyInitialDelay": "",
		"strategyMaxDelay": "",
		"strategyRandomisationFactor": "",
		"requestedSessionTimeout": "",
		"connectionStartDelay": "",
		"reconnectDelay": "",
		"maxBadSessionRequests": "10"
	},
	{
		"id": "a34d59f8.24a478",
		"type": "ui_group",
		"name": "Group 2",
		"tab": "",
		"order": 2,
		"disp": true,
		"width": 6
	},
	{
		"id": "3c423348.a5c65c",
		"type": "ui_group",
		"name": "Group 2",
		"tab": "",
		"order": 2,
		"disp": true,
		"width": 6
	},
	{
		"id": "185884fd.d27e3b",
		"type": "ui_group",
		"name": "Group 3",
		"tab": "",
		"order": 3,
		"disp": true,
		"width": 6
	},
	{
		"id": "f88b6aab.436af8",
		"type": "ui_group",
		"z": "",
		"name": "RealTime",
		"tab": "",
		"order": 1,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "5a4080.f44c3f8",
		"type": "ui_group",
		"z": "",
		"name": "Températures du processeur",
		"tab": "",
		"order": 5,
		"disp": true,
		"width": "24",
		"collapse": true
	},
	{
		"id": "62e49135.d6f58",
		"type": "MySQLdatabase",
		"z": "",
		"host": "192.168.1.238",
		"port": "3306",
		"db": "baldi",
		"tz": ""
	},
	{
		"id": "d4bd314.77d22d",
		"type": "ui_group",
		"z": "",
		"name": "Températures du processeur",
		"tab": "",
		"order": 5,
		"disp": true,
		"width": "24",
		"collapse": true
	},
	{
		"id": "d50a602.bf9c8a",
		"type": "ui_group",
		"z": "",
		"name": "Date",
		"tab": "",
		"order": 1,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "83d2692b.fbb268",
		"type": "ui_group",
		"z": "",
		"name": "Filtrer les données",
		"tab": "",
		"order": 4,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "62346848.627938",
		"type": "ui_group",
		"z": "",
		"name": "Heure",
		"tab": "",
		"order": 2,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "b73ccfc1.0d595",
		"type": "ui_group",
		"z": "",
		"name": "Minute",
		"tab": "",
		"order": 3,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "6638421f.983e8c",
		"type": "ui_group",
		"z": "",
		"name": "Thermostat demo",
		"tab": "",
		"order": 2,
		"disp": true,
		"width": "6"
	},
	{
		"id": "8001818e.455e5",
		"type": "ui_group",
		"z": "",
		"name": "Graph32",
		"tab": "",
		"order": 7,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "342073f1.080eac",
		"type": "ui_group",
		"z": "",
		"name": "Grah12",
		"tab": "",
		"order": 3,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "6cb22571.6baf8c",
		"type": "ui_group",
		"z": "",
		"name": "Graph16",
		"tab": "",
		"order": 4,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "e35d36b1.31fe58",
		"type": "ui_group",
		"z": "",
		"name": "Graph20",
		"tab": "",
		"order": 5,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "85b73868.4f74f8",
		"type": "ui_group",
		"z": "",
		"name": "Graph24",
		"tab": "",
		"order": 6,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "cf2941a9.7cb05",
		"type": "ui_group",
		"z": "",
		"name": "Graph28",
		"tab": "",
		"order": 8,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "da4af521.0242f8",
		"type": "ui_group",
		"z": "",
		"name": "Graph32",
		"tab": "",
		"order": 9,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "661d1ad1.0181f4",
		"type": "ui_group",
		"z": "",
		"name": "Graph36",
		"tab": "",
		"order": 10,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "bd64067a.5a9fc8",
		"type": "ui_group",
		"z": "",
		"name": "Graph40",
		"tab": "",
		"order": 11,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "43708b2a.58f694",
		"type": "ui_group",
		"z": "",
		"name": "Graph44",
		"tab": "",
		"order": 12,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "b737e1a0.a1c1",
		"type": "ui_group",
		"z": "",
		"name": "Graph48",
		"tab": "",
		"order": 13,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "36ad088f.06a4a8",
		"type": "ui_group",
		"z": "",
		"name": "Graph52",
		"tab": "",
		"order": 14,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "d092ffa8.c157",
		"type": "ui_group",
		"z": "",
		"name": "Graph56",
		"tab": "",
		"order": 15,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "ea6cfea0.6381d",
		"type": "ui_group",
		"z": "",
		"name": "Graph60",
		"tab": "",
		"order": 16,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "16facd.695a0534",
		"type": "ui_group",
		"z": "",
		"name": "Graph60",
		"tab": "",
		"order": 17,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "f29bee4f.0f483",
		"type": "ui_group",
		"z": "",
		"name": "Graph56",
		"tab": "",
		"order": 16,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "862cd522.e8f768",
		"type": "ui_group",
		"z": "",
		"name": "Graph52",
		"tab": "",
		"order": 15,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "407958a4.281db8",
		"type": "ui_group",
		"z": "",
		"name": "Graph48",
		"tab": "",
		"order": 14,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "3781db14.f3c564",
		"type": "ui_group",
		"z": "",
		"name": "Graph44",
		"tab": "",
		"order": 13,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "e0a98f54.19299",
		"type": "ui_group",
		"z": "",
		"name": "Graph40",
		"tab": "",
		"order": 12,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "d8150c97.40214",
		"type": "ui_group",
		"z": "",
		"name": "Graph0",
		"tab": "",
		"order": 2,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "d827f5b9.7710d8",
		"type": "ui_group",
		"z": "",
		"name": "Graph4",
		"tab": "",
		"order": 3,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "7017d0d8.efbf9",
		"type": "ui_group",
		"z": "",
		"name": "Graph8",
		"tab": "",
		"order": 4,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "cea45f45.57008",
		"type": "ui_group",
		"z": "",
		"name": "Graph12",
		"tab": "",
		"order": 5,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "10470e57.2ba4d2",
		"type": "ui_group",
		"z": "",
		"name": "Graph16",
		"tab": "",
		"order": 6,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "f0333a5.e8384c8",
		"type": "ui_group",
		"z": "",
		"name": "Graph20",
		"tab": "",
		"order": 7,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "a1f61f4d.9c9b3",
		"type": "ui_group",
		"z": "",
		"name": "Graph24",
		"tab": "",
		"order": 8,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "c791d8a1.6e3cc8",
		"type": "ui_group",
		"z": "",
		"name": "Graph28",
		"tab": "",
		"order": 9,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "38a1f0e3.d0df2",
		"type": "ui_group",
		"z": "",
		"name": "Graph32",
		"tab": "",
		"order": 10,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "7a62738.d60d68c",
		"type": "ui_group",
		"z": "",
		"name": "Graph36",
		"tab": "",
		"order": 11,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "65f134f0.0d4f4c",
		"type": "ui_group",
		"z": "",
		"name": "Graph40",
		"tab": "",
		"order": 17,
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "9254f97.9f83e08",
		"type": "ui_group",
		"z": "",
		"name": "Graphs",
		"tab": "",
		"disp": false,
		"width": "13"
	},
	{
		"id": "bcebe23f.f57c4",
		"type": "ui_group",
		"z": "",
		"name": "Control",
		"tab": "",
		"disp": false,
		"width": "3"
	},
	{
		"id": "bc6821e2.5bee9",
		"type": "ui_group",
		"z": "",
		"name": "Default",
		"tab": "75c0b58f.1a738c",
		"disp": false,
		"width": "6",
		"collapse": false
	},
	{
		"id": "75c0b58f.1a738c",
		"type": "ui_tab",
		"z": "",
		"name": "Home",
		"icon": "dashboard",
		"order": 3
	},
	{
		"id": "74e7f0f3.c8995",
		"type": "ui_tab",
		"z": "",
		"name": "Allarmi",
		"icon": "dashboard",
		"order": 2
	},
	{
		"id": "9086d920.533bf8",
		"type": "ui_group",
		"z": "",
		"name": "Allarmi Cartoning Machine",
		"tab": "74e7f0f3.c8995",
		"order": 1,
		"disp": true,
		"width": "8",
		"collapse": true
	},
	{
		"id": "3817b9c7.9f9276",
		"type": "ui_group",
		"z": "",
		"name": "Allarmi FlowPack",
		"tab": "74e7f0f3.c8995",
		"order": 2,
		"disp": true,
		"width": "8",
		"collapse": false
	},
	{
		"id": "73d8f15f.6379c",
		"type": "ui_group",
		"z": "",
		"name": "Allarmi DistributionRowLine",
		"tab": "74e7f0f3.c8995",
		"order": 3,
		"disp": true,
		"width": "8",
		"collapse": false
	},
	{
		"id": "7adf852.52f797c",
		"type": "ui_group",
		"z": "",
		"name": "Allarmi TwinMachine",
		"tab": "74e7f0f3.c8995",
		"order": 4,
		"disp": true,
		"width": "8",
		"collapse": false
	},
	{
		"id": "967e2b90.d599d8",
		"type": "ui_group",
		"z": "",
		"name": "Allarmi FillingUnit Machine",
		"tab": "74e7f0f3.c8995",
		"order": 5,
		"disp": true,
		"width": "8",
		"collapse": false
	},
	{
		"id": "1e0354d2.d4b34b",
		"type": "ui_tab",
		"z": "",
		"name": "Baldi Line",
		"icon": "dashboard",
		"order": 1
	},
	{
		"id": "82331602.bad968",
		"type": "ui_group",
		"z": "",
		"name": "CartoningMachine Realtime",
		"tab": "1e0354d2.d4b34b",
		"order": 4,
		"disp": true,
		"width": "8",
		"collapse": true
	},
	{
		"id": "678659e4.fa9658",
		"type": "ui_group",
		"z": "",
		"name": "FlowPack Realtime",
		"tab": "1e0354d2.d4b34b",
		"order": 2,
		"disp": true,
		"width": "8",
		"collapse": true
	},
	{
		"id": "b8ed1da7.b56e8",
		"type": "OPCUA-IIoT-Connector",
		"z": "31a13872.0bad28",
		"endpoint": "opc.tcp://localhost:55388/",
		"keepSessionAlive": false,
		"loginEnabled": false,
		"securityPolicy": "None",
		"securityMode": "NONE",
		"name": "SERVER ONE",
		"showErrors": false
	},
	{
		"id": "97cc174e.529a18",
		"type": "ui_group",
		"z": "",
		"name": "DistributionRows RealTime",
		"tab": "1e0354d2.d4b34b",
		"order": 1,
		"disp": true,
		"width": "8",
		"collapse": true
	},
	{
		"id": "83c662a3.0a1a1",
		"type": "ui_group",
		"z": "",
		"name": "FillingUnit RealTime",
		"tab": "1e0354d2.d4b34b",
		"order": 3,
		"disp": true,
		"width": "8",
		"collapse": true
	},
	{
		"id": "38e45124.8ba21e",
		"type": "ui_group",
		"z": "",
		"name": "TwinMachine RealTime",
		"tab": "1e0354d2.d4b34b",
		"order": 5,
		"disp": true,
		"width": "8",
		"collapse": true
	},
	{
		"id": "fbb8d36e.7893e",
		"type": "ui_group",
		"z": "",
		"name": "test",
		"tab": "1e0354d2.d4b34b",
		"disp": true,
		"width": "6",
		"collapse": false
	},
	{
		"id": "58ca8c75.35d394",
		"type": "ui_group",
		"z": "",
		"name": "testy",
		"tab": "e8757f85.ac6eb",
		"disp": true,
		"width": "6"
	},
	{
		"id": "e8757f85.ac6eb",
		"type": "ui_tab",
		"z": "",
		"name": "testy",
		"icon": "dashboard"
	},
	{
		"id": "34f517da.951658",
		"type": "OPCUA-IIoT-Read",
		"z": "d34333c5.293d8",
		"attributeId": "13",
		"maxAge": 1,
		"depth": 1,
		"connector": "bf2db24b.6e1e7",
		"name": "",
		"justValue": true,
		"showStatusActivities": true,
		"showErrors": true,
		"parseStrings": true,
		"historyDays": 1,
		"x": 370,
		"y": 360,
		"wires": [
			[
				"b5fd0584.069e58",
				"9b8bcae7.e49da8",
				"2d0edeee.1f61c2",
				"8683211f.9524b"
			]
		]
	},
	{
		"id": "12048b5d.d43b15",
		"type": "OPCUA-IIoT-Inject",
		"z": "d34333c5.293d8",
		"injectType": "inject",
		"payload": "",
		"payloadType": "date",
		"topic": "",
		"repeat": "5",
		"crontab": "",
		"once": true,
		"startDelay": "",
		"name": "Start Node",
		"addressSpaceItems": [
			{
				"name": "0-CartoningMachineInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_CommandWord",
				"datatypeName": ""
			},
			{
				"name": "1-CartoningMachineOutPut_StatusWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineOutPut_StatusWord",
				"datatypeName": ""
			},
			{
				"name": "2-CartoningMachineOutPut_MachineStatus",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineOutPut_MachineStatus",
				"datatypeName": ""
			},
			{
				"name": "3-CartoningMachineOutPut_ActualSpeed",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineOutPut_ActualSpeed",
				"datatypeName": ""
			},
			{
				"name": "4-CartoningMachineOutPut_SpeedReference",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineOutPut_SpeedReference",
				"datatypeName": ""
			},
			{
				"name": "5-CartoningMachineOutPut_RecipeNumberActive",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineOutPut_RecipeNumberActive",
				"datatypeName": ""
			},
			{
				"name": "6-CartoningMachineAlarms_AlarmLINT0",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT0",
				"datatypeName": ""
			},
			{
				"name": "7-CartoningMachineAlarms_AlarmLINT4",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT4",
				"datatypeName": ""
			},
			{
				"name": "8-CartoningMachineAlarms_AlarmLINT8",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT8",
				"datatypeName": ""
			},
			{
				"name": "9-CartoningMachineAlarms_AlarmLINT12",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT12",
				"datatypeName": ""
			},
			{
				"name": "10-CartoningMachineAlarms_AlarmLINT16",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT16",
				"datatypeName": ""
			},
			{
				"name": "11-CartoningMachineAlarms_AlarmLINT20",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT20",
				"datatypeName": ""
			},
			{
				"name": "12-CartoningMachineAlarms_AlarmLINT24",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT24",
				"datatypeName": ""
			},
			{
				"name": "13-CartoningMachineAlarms_AlarmLINT28",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT28",
				"datatypeName": ""
			},
			{
				"name": "14-CartoningMachineAlarms_AlarmLINT32",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT32",
				"datatypeName": ""
			},
			{
				"name": "15-CartoningMachineAlarms_AlarmLINT36",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT36",
				"datatypeName": ""
			},
			{
				"name": "16-CartoningMachineAlarms_AlarmLINT40",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT40",
				"datatypeName": ""
			},
			{
				"name": "17-CartoningMachineAlarms_AlarmLINT44",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT44",
				"datatypeName": ""
			},
			{
				"name": "18-CartoningMachineAlarms_AlarmLINT48",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT48",
				"datatypeName": ""
			},
			{
				"name": "19-CartoningMachineAlarms_AlarmLINT52",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT52",
				"datatypeName": ""
			},
			{
				"name": "20-CartoningMachineAlarms_AlarmLINT56",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT56",
				"datatypeName": ""
			},
			{
				"name": "21-CartoningMachineAlarms_AlarmLINT60",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineAlarms_AlarmLINT60",
				"datatypeName": ""
			},
			{
				"name": "22-FlowPackInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_CommandWord",
				"datatypeName": ""
			},
			{
				"name": "23-FlowPackOutPut_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_CommandWord",
				"datatypeName": ""
			},
			{
				"name": "24-FlowPackOutPut_StatusWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_StatusWord",
				"datatypeName": ""
			},
			{
				"name": "25-FlowPackOutPut_MachineStatus",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_MachineStatus",
				"datatypeName": ""
			},
			{
				"name": "26-FlowPackOutPut_ActualSpeed",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_ActualSpeed",
				"datatypeName": ""
			},
			{
				"name": "27-FlowPackOutPut_SpeedReference",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_SpeedReference",
				"datatypeName": ""
			},
			{
				"name": "28-FlowPackOutPut_RecipeNumberActive",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_RecipeNumberActive",
				"datatypeName": ""
			},
			{
				"name": "29-FlowPackOutPut_TotalPacksCount",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_TotalPacksCount",
				"datatypeName": ""
			},
			{
				"name": "30-FlowPackOutPut_ChainEmptyPacksCount",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_ChainEmptyPacksCount",
				"datatypeName": ""
			},
			{
				"name": "31-FlowPackOutPut_CrimperLongDwellSensorCrushCount",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_CrimperLongDwellSensorCrushCount",
				"datatypeName": ""
			},
			{
				"name": "32-FlowPackOutPut_OutPutConveyorDoublePacksCount",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackOutPut_OutPutConveyorDoublePacksCount",
				"datatypeName": ""
			},
			{
				"name": "33-FlowPackAlarms_AlarmLINT0",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT0",
				"datatypeName": ""
			},
			{
				"name": "34-FlowPackAlarms_AlarmLINT4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT4",
				"datatypeName": ""
			},
			{
				"name": "35-FlowPackAlarms_AlarmLINT8",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT8",
				"datatypeName": ""
			},
			{
				"name": "36-FlowPackAlarms_AlarmLINT12",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT12",
				"datatypeName": ""
			},
			{
				"name": "37-FlowPackAlarms_AlarmLINT16",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT16",
				"datatypeName": ""
			},
			{
				"name": "38-FlowPackAlarms_AlarmLINT20",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT20",
				"datatypeName": ""
			},
			{
				"name": "39-FlowPackAlarms_AlarmLINT24",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT24",
				"datatypeName": ""
			},
			{
				"name": "40-FlowPackAlarms_AlarmLINT28",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT28",
				"datatypeName": ""
			},
			{
				"name": "41-FlowPackAlarms_AlarmLINT32",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT32",
				"datatypeName": ""
			},
			{
				"name": "42-FlowPackAlarms_AlarmLINT36",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT36",
				"datatypeName": ""
			},
			{
				"name": "43-FlowPackAlarms_AlarmLINT40",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT40",
				"datatypeName": ""
			},
			{
				"name": "44-FlowPackAlarms_AlarmLINT44",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT44",
				"datatypeName": ""
			},
			{
				"name": "45-FlowPackAlarms_AlarmLINT48",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT48",
				"datatypeName": ""
			},
			{
				"name": "46-FlowPackAlarms_AlarmLINT52",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT52",
				"datatypeName": ""
			},
			{
				"name": "47-FlowPackAlarms_AlarmLINT56",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT56",
				"datatypeName": ""
			},
			{
				"name": "48-FlowPackAlarms_AlarmLINT60",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackAlarms_AlarmLINT60",
				"datatypeName": ""
			},
			{
				"name": "49-DistributionRowsAlarms_AlarmLINT0",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT0",
				"datatypeName": ""
			},
			{
				"name": "50-DistributionRowsAlarms_AlarmLINT12",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT12",
				"datatypeName": ""
			},
			{
				"name": "51-DistributionRowsAlarms_AlarmLINT16",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT16",
				"datatypeName": ""
			},
			{
				"name": "52-DistributionRowsAlarms_AlarmLINT20",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT20",
				"datatypeName": ""
			},
			{
				"name": "53-DistributionRowsAlarms_AlarmLINT24",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT24",
				"datatypeName": ""
			},
			{
				"name": "54-DistributionRowsAlarms_AlarmLINT28",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT28",
				"datatypeName": ""
			},
			{
				"name": "55-DistributionRowsAlarms_AlarmLINT32",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT32",
				"datatypeName": ""
			},
			{
				"name": "56-DistributionRowsAlarms_AlarmLINT36",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT36",
				"datatypeName": ""
			},
			{
				"name": "57-DistributionRowsAlarms_AlarmLINT4",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT4",
				"datatypeName": ""
			},
			{
				"name": "58-DistributionRowsAlarms_AlarmLINT40",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT40",
				"datatypeName": ""
			},
			{
				"name": "59-DistributionRowsAlarms_AlarmLINT44",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT44",
				"datatypeName": ""
			},
			{
				"name": "60-DistributionRowsAlarms_AlarmLINT48",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT48",
				"datatypeName": ""
			},
			{
				"name": "61-DistributionRowsAlarms_AlarmLINT52",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT52",
				"datatypeName": ""
			},
			{
				"name": "62-DistributionRowsAlarms_AlarmLINT56",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT56",
				"datatypeName": ""
			},
			{
				"name": "63-DistributionRowsAlarms_AlarmLINT60",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT60",
				"datatypeName": ""
			},
			{
				"name": "64-DistributionRowsAlarms_AlarmLINT8",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsAlarms_AlarmLINT8",
				"datatypeName": ""
			},
			{
				"name": "65-DistributionRowsInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_CommandWord",
				"datatypeName": ""
			},
			{
				"name": "66-DistributionRowsOutPut_MachineStatus",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsOutPut_MachineStatus",
				"datatypeName": ""
			},
			{
				"name": "67-DistributionRowsOutPut_RecipeNumberActive",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsOutPut_RecipeNumberActive",
				"datatypeName": ""
			},
			{
				"name": "68-DistributionRowsOutPut_StatusWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsOutPut_StatusWord",
				"datatypeName": ""
			},
			{
				"name": "69-DistributionRowsOutPut_TotalRowsCount",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsOutPut_TotalRowsCount",
				"datatypeName": ""
			},
			{
				"name": "70-FillingUnitOutPut_ActualSpeed",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_ActualSpeed",
				"datatypeName": ""
			},
			{
				"name": "71-TwinMachineAlarms_AlarmLINT0",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT0",
				"datatypeName": ""
			},
			{
				"name": "72-TwinMachineAlarms_AlarmLINT12",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT12",
				"datatypeName": ""
			},
			{
				"name": "73-TwinMachineAlarms_AlarmLINT16",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT16",
				"datatypeName": ""
			},
			{
				"name": "74-TwinMachineAlarms_AlarmLINT20",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT20",
				"datatypeName": ""
			},
			{
				"name": "75-TwinMachineAlarms_AlarmLINT24",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT24",
				"datatypeName": ""
			},
			{
				"name": "76-TwinMachineAlarms_AlarmLINT28",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT28",
				"datatypeName": ""
			},
			{
				"name": "77-TwinMachineAlarms_AlarmLINT32",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT32",
				"datatypeName": ""
			},
			{
				"name": "78-TwinMachineAlarms_AlarmLINT36",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT36",
				"datatypeName": ""
			},
			{
				"name": "79-TwinMachineAlarms_AlarmLINT4",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT4",
				"datatypeName": ""
			},
			{
				"name": "80-TwinMachineAlarms_AlarmLINT40",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT40",
				"datatypeName": ""
			},
			{
				"name": "81-TwinMachineAlarms_AlarmLINT44",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT44",
				"datatypeName": ""
			},
			{
				"name": "82-TwinMachineAlarms_AlarmLINT48",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT48",
				"datatypeName": ""
			},
			{
				"name": "83-TwinMachineAlarms_AlarmLINT52",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT52",
				"datatypeName": ""
			},
			{
				"name": "84-TwinMachineAlarms_AlarmLINT56",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT56",
				"datatypeName": ""
			},
			{
				"name": "85-TwinMachineAlarms_AlarmLINT60",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT60",
				"datatypeName": ""
			},
			{
				"name": "86-TwinMachineAlarms_AlarmLINT8",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineAlarms_AlarmLINT8",
				"datatypeName": ""
			},
			{
				"name": "87-TwinMachineInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_CommandWord",
				"datatypeName": ""
			},
			{
				"name": "88-TwinMachineOutPut_ActualSpeed",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineOutPut_ActualSpeed",
				"datatypeName": ""
			},
			{
				"name": "89-TwinMachineOutPut_EmergenCyBarCount",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineOutPut_EmergenCyBarCount",
				"datatypeName": ""
			},
			{
				"name": "90-TwinMachineOutPut_MachineStatus",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineOutPut_MachineStatus",
				"datatypeName": ""
			},
			{
				"name": "91-TwinMachineOutPut_RecipeNumberActive",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineOutPut_RecipeNumberActive",
				"datatypeName": ""
			},
			{
				"name": "92-TwinMachineOutPut_StatusWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineOutPut_StatusWord",
				"datatypeName": ""
			},
			{
				"name": "93-TwinMachineOutPut_TotalGlobalPacksCount",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineOutPut_TotalGlobalPacksCount",
				"datatypeName": ""
			},
			{
				"name": "94-FillingUnitAlarms_AlarmLINT0",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT0",
				"datatypeName": ""
			},
			{
				"name": "95-FillingUnitAlarms_AlarmLINT12",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT12",
				"datatypeName": ""
			},
			{
				"name": "96-FillingUnitAlarms_AlarmLINT16",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT16",
				"datatypeName": ""
			},
			{
				"name": "97-FillingUnitAlarms_AlarmLINT20",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT20",
				"datatypeName": ""
			},
			{
				"name": "98-FillingUnitAlarms_AlarmLINT24",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT24",
				"datatypeName": ""
			},
			{
				"name": "99-FillingUnitAlarms_AlarmLINT28",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT28",
				"datatypeName": ""
			},
			{
				"name": "100-FillingUnitAlarms_AlarmLINT32",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT32",
				"datatypeName": ""
			},
			{
				"name": "101-FillingUnitAlarms_AlarmLINT36",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT36",
				"datatypeName": ""
			},
			{
				"name": "102-FillingUnitAlarms_AlarmLINT4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT4",
				"datatypeName": ""
			},
			{
				"name": "103-FillingUnitAlarms_AlarmLINT40",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT40",
				"datatypeName": ""
			},
			{
				"name": "104-FillingUnitAlarms_AlarmLINT44",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT44",
				"datatypeName": ""
			},
			{
				"name": "105-FillingUnitAlarms_AlarmLINT48",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT48",
				"datatypeName": ""
			},
			{
				"name": "106-FillingUnitAlarms_AlarmLINT52",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT52",
				"datatypeName": ""
			},
			{
				"name": "107-FillingUnitAlarms_AlarmLINT56",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT56",
				"datatypeName": ""
			},
			{
				"name": "108-FillingUnitAlarms_AlarmLINT60",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT60",
				"datatypeName": ""
			},
			{
				"name": "109-FillingUnitAlarms_AlarmLINT8",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitAlarms_AlarmLINT8",
				"datatypeName": ""
			},
			{
				"name": "110-FillingUnitInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_CommandWord",
				"datatypeName": ""
			},
			{
				"name": "111-FillingUnitOutPut_ActualSpeed",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_ActualSpeed",
				"datatypeName": ""
			},
			{
				"name": "112-FillingUnitOutPut_ByPassPackOnEntrance_Line1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_ByPassPackOnEntrance_Line1",
				"datatypeName": ""
			},
			{
				"name": "113-FillingUnitOutPut_ByPassPackOnEntrance_Line2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_ByPassPackOnEntrance_Line2",
				"datatypeName": ""
			},
			{
				"name": "114-FillingUnitOutPut_ClosePackOnEntrance_Line1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_ClosePackOnEntrance_Line1",
				"datatypeName": ""
			},
			{
				"name": "115-FillingUnitOutPut_ClosePackOnEntrance_Line2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_ClosePackOnEntrance_Line2",
				"datatypeName": ""
			},
			{
				"name": "116-FillingUnitOutPut_DoublePackOnEntrance_Line1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_DoublePackOnEntrance_Line1",
				"datatypeName": ""
			},
			{
				"name": "117-FillingUnitOutPut_DoublePackOnEntrance_Line2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_DoublePackOnEntrance_Line2",
				"datatypeName": ""
			},
			{
				"name": "118-FillingUnitOutPut_MachineStatus",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_MachineStatus",
				"datatypeName": ""
			},
			{
				"name": "119-FillingUnitOutPut_RecipeNumberActive",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_RecipeNumberActive",
				"datatypeName": ""
			},
			{
				"name": "120-FillingUnitOutPut_RobotPlaceNumber",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_RobotPlaceNumber",
				"datatypeName": ""
			},
			{
				"name": "121-FillingUnitOutPut_SpeedReference",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_SpeedReference",
				"datatypeName": ""
			},
			{
				"name": "122-FillingUnitOutPut_StatusWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitOutPut_StatusWord",
				"datatypeName": ""
			},
			{
				"name": "123-NJ_OPC_UA_CartoningMachineInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_CommandWord",
				"datatypeName": ""
			}
		],
		"x": 190,
		"y": 360,
		"wires": [
			[
				"34f517da.951658"
			]
		]
	},
	{
		"id": "26b79b1f.64cb54",
		"type": "debug",
		"z": "d34333c5.293d8",
		"name": "1",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "payload",
		"x": 350,
		"y": 240,
		"wires": []
	},
	{
		"id": "7f510295.0b637c",
		"type": "ui_template",
		"z": "d34333c5.293d8",
		"group": "46dc1136.b999c",
		"name": "",
		"order": 6,
		"width": 0,
		"height": 0,
		"format": "<script id=\"clockScript1\" type=\"text/javascript\">\n    var clockInterval;\n    $(function () {\n        if (clockInterval) return;\n\n        //add logo\n        var div1 = $('<div/>');\n        var logo = new Image();\n\n        logo.src = '/images/logo.jpg'\n        logo.height = 45;\n        div1[0].style.margin = '10px auto';\n\n        div1.append(logo);\n\t\t\n         //add clock\n        var div2 = $('<div/>');\n        var p = $('<p/>');\n\n        div2.append(p);\n        div2[0].style.margin = '5px';\n\t\t\n       //add logo_baldi\n        var div3 = $('<div/>');\n        var logo1 = new Image();\n\n        logo1.src = '/images/logo_baldi.png'\n        logo1.height = 45;\n        div3[0].style.margin = '10px auto';\n\n        div3.append(logo1);\n\n        function displayTime() {\n            p.text(new Date().toLocaleString());\n        }\n        \n        clockInterval = setInterval(displayTime, 1000);\n\n        //add to toolbar when it's available\n        var addToToolbarTimer;\n        \n        function addToToolbar() {\n            var toolbar = $('.md-toolbar-tools');\n            \n            if(!toolbar.length) return;\n            \n            toolbar.append(div3);\n            toolbar.append(div1);\n            toolbar.append(div2);\n\t\t\t\n            clearInterval(addToToolbarTimer);\n        }\n        addToToolbarTimer = setInterval(addToToolbar, 100);\n    });\n</script>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "global",
		"x": 180,
		"y": 240,
		"wires": [
			[
				"26b79b1f.64cb54"
			]
		]
	},
	{
		"id": "680c1946.cdb098",
		"type": "debug",
		"z": "d34333c5.293d8",
		"name": "add",
		"active": true,
		"tosidebar": true,
		"console": true,
		"tostatus": false,
		"complete": "arr.payload",
		"x": 2070,
		"y": 480,
		"wires": []
	},
	{
		"id": "5c498ddb.2374d4",
		"type": "combine-list",
		"z": "d34333c5.293d8",
		"name": "",
		"topic": "",
		"payload": "array",
		"columns": [
			"arr"
		],
		"sort": "payload",
		"order": "asc",
		"defer": 250,
		"timeout": 0,
		"distinction": "topic",
		"x": 2230,
		"y": 300,
		"wires": [
			[]
		]
	},
	{
		"id": "b5fd0584.069e58",
		"type": "link out",
		"z": "d34333c5.293d8",
		"name": "OPCUA_Flowpack_alm",
		"links": [
			"14328149.320dcf"
		],
		"x": 595,
		"y": 320,
		"wires": []
	},
	{
		"id": "665a75a0.e96d3c",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "6-CartoningMachineAlarms_AlarmLINT0",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[6].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 140,
		"wires": [
			[
				"5ebbe0f8.cd609"
			]
		]
	},
	{
		"id": "5ebbe0f8.cd609",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\n\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);\n\n\nmsg.topic = myArray;\nmsg.old = mystring;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 140,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "16f8e237.7b27be",
		"type": "switch",
		"z": "864446f5.ece2d8",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "ALM=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM CartoningALM WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1610,
		"y": 400,
		"wires": [
			[
				"574f0548.4c315c"
			],
			[
				"a044dbd1.0bf398"
			]
		]
	},
	{
		"id": "a044dbd1.0bf398",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM CartoningALM WHERE ALM = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1710,
		"y": 460,
		"wires": [
			[
				"574f0548.4c315c"
			]
		]
	},
	{
		"id": "670cefc0.89c45",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "7-CartoningMachineAlarms_AlarmLINT4",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[7].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 180,
		"wires": [
			[
				"3ee4336c.44c52c"
			]
		]
	},
	{
		"id": "3ee4336c.44c52c",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 1;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 180,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "58a532bf.8fa3fc",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "8-CartoningMachineAlarms_AlarmLINT8",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[8].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 220,
		"wires": [
			[
				"f55a6d93.fc68b"
			]
		]
	},
	{
		"id": "f55a6d93.fc68b",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 2;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 220,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "2a131b1a.549394",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "9-CartoningMachineAlarms_AlarmLINT12",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[9].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 260,
		"wires": [
			[
				"e3d79da2.b5bb8"
			]
		]
	},
	{
		"id": "e3d79da2.b5bb8",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 3;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 260,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "1e8efec2.bc4b01",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "10-CartoningMachineAlarms_AlarmLINT16",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[10].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 300,
		"wires": [
			[
				"d268a6d2.326688"
			]
		]
	},
	{
		"id": "d268a6d2.326688",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 4;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 300,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "a2770fe2.a548e",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 5;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 340,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "4bf5fb16.4eee54",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "11-CartoningMachineAlarms_AlarmLINT20",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[11].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 340,
		"wires": [
			[
				"a2770fe2.a548e"
			]
		]
	},
	{
		"id": "886685c9.976a28",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 6;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 380,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "7ae02383.004a5c",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "12-CartoningMachineAlarms_AlarmLINT24",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[12].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 380,
		"wires": [
			[
				"886685c9.976a28"
			]
		]
	},
	{
		"id": "1fb73db5.38b012",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 7;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 420,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic",
			"parts"
		]
	},
	{
		"id": "395b814c.c8f10e",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "13-CartoningMachineAlarms_AlarmLINT28",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[13].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[13].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 420,
		"wires": [
			[
				"1fb73db5.38b012"
			]
		]
	},
	{
		"id": "327283e4.7bfdec",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "14-CartoningMachineAlarms_AlarmLINT32",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[14].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[14].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 460,
		"wires": [
			[
				"3663875c.de6698"
			]
		]
	},
	{
		"id": "4c291e9d.2906c",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "15-CartoningMachineAlarms_AlarmLINT36",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[15].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 500,
		"wires": [
			[
				"a2ea02d7.af763"
			]
		]
	},
	{
		"id": "a2ea02d7.af763",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*9\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 500,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "3663875c.de6698",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 8\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 800,
		"y": 460,
		"wires": [
			[
				"2b0a005f.1089c"
			]
		],
		"outputLabels": [
			"payload"
		]
	},
	{
		"id": "9372b809.6167d8",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "16-CartoningMachineAlarms_AlarmLINT40",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[16].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 540,
		"wires": [
			[
				"4c72b261.8ac84c"
			]
		]
	},
	{
		"id": "4c72b261.8ac84c",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*10\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    query = \"SELECT * FROM CartoningALM WHERE \";\n    query += myArray.join(\" or \");\n    query += \";\";\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 540,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "eaa4eed8.5e6b3",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "17-CartoningMachineAlarms_AlarmLINT44",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[17].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 580,
		"wires": [
			[
				"aefb3222.914b4"
			]
		]
	},
	{
		"id": "aefb3222.914b4",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*11\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 580,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "fd9fbe89.37e6b",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "18-CartoningMachineAlarms_AlarmLINT48",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[18].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 620,
		"wires": [
			[
				"348dde2f.705a92"
			]
		]
	},
	{
		"id": "348dde2f.705a92",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*12\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 620,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "416c4a06.9a42f4",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "19-CartoningMachineAlarms_AlarmLINT52",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[19].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 660,
		"wires": [
			[
				"292061bb.86aa8e"
			]
		]
	},
	{
		"id": "292061bb.86aa8e",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*13\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 660,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "a961167f.8a3788",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "20-CartoningMachineAlarms_AlarmLINT56",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[20].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 700,
		"wires": [
			[
				"9e6c5e37.0be8f"
			]
		]
	},
	{
		"id": "9e6c5e37.0be8f",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*14\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 700,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "469ab55d.6b6d2c",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "21-CartoningMachineAlarms_AlarmLINT60",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[21].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 740,
		"wires": [
			[
				"725bda80.9fd9c4"
			]
		]
	},
	{
		"id": "725bda80.9fd9c4",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*15\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 740,
		"wires": [
			[
				"2b0a005f.1089c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "9b8bcae7.e49da8",
		"type": "link out",
		"z": "d34333c5.293d8",
		"name": "OPCUA_CartoningMachine",
		"links": [
			"2f0e1560.c0a1ea",
			"32131dfb.0928b2",
			"37589546.47af9a",
			"92438b1b.7611c8",
			"ad4b8109.c7d16"
		],
		"x": 600,
		"y": 260,
		"wires": []
	},
	{
		"id": "92438b1b.7611c8",
		"type": "link in",
		"z": "864446f5.ece2d8",
		"name": "OPCUA_CartoningMachine",
		"links": [
			"9b8bcae7.e49da8"
		],
		"x": 75,
		"y": 420,
		"wires": [
			[
				"665a75a0.e96d3c",
				"670cefc0.89c45",
				"58a532bf.8fa3fc",
				"2a131b1a.549394",
				"1e8efec2.bc4b01",
				"4bf5fb16.4eee54",
				"7ae02383.004a5c",
				"395b814c.c8f10e",
				"327283e4.7bfdec",
				"4c291e9d.2906c",
				"9372b809.6167d8",
				"eaa4eed8.5e6b3",
				"fd9fbe89.37e6b",
				"416c4a06.9a42f4",
				"a961167f.8a3788",
				"469ab55d.6b6d2c"
			]
		]
	},
	{
		"id": "b2afc303.f6a2",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "1-CartoningMachineOutPut_StatusWord",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[1].value.value)\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 720,
		"y": 220,
		"wires": [
			[
				"7dda5d4b.3c4484"
			]
		]
	},
	{
		"id": "17192afa.794735",
		"type": "ui_text",
		"z": "47b2f5dd.b4683c",
		"group": "82331602.bad968",
		"order": 2,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "MachineStatus",
		"format": "{{msg.payload[0].Status}}",
		"layout": "row-spread",
		"x": 1300,
		"y": 260,
		"wires": []
	},
	{
		"id": "cc464c1b.9d618",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "2-CartoningMachineOutPut_MachineStatus",
		"func": "msg.payload = msg.payload[2].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 730,
		"y": 260,
		"wires": [
			[
				"339b6798.fc3a38"
			]
		]
	},
	{
		"id": "2c3d40d1.69ee9",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "3-CartoningMachineOutPut_ActualSpeed",
		"func": "msg.payload = msg.payload[3].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 720,
		"y": 300,
		"wires": [
			[
				"7f453070.c4d6c"
			]
		]
	},
	{
		"id": "23f6977e.fbe9d8",
		"type": "ui_text",
		"z": "47b2f5dd.b4683c",
		"group": "82331602.bad968",
		"order": 4,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "ActualSpeed",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1290,
		"y": 300,
		"wires": []
	},
	{
		"id": "2f944c79.dceb14",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "4-CartoningMachineOutPut_SpeedReference",
		"func": "msg.payload = msg.payload[4].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 730,
		"y": 340,
		"wires": [
			[
				"4c78986b.66cd18"
			]
		]
	},
	{
		"id": "9654c00.e54c84",
		"type": "ui_text",
		"z": "47b2f5dd.b4683c",
		"group": "82331602.bad968",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "SpeedReference",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1310,
		"y": 340,
		"wires": []
	},
	{
		"id": "bb16423d.67faf",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "5-CartoningMachineOutPut_RecipeNumberActive",
		"func": "msg.payload = msg.payload[5].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 750,
		"y": 380,
		"wires": [
			[
				"50ae73be.69355c"
			]
		]
	},
	{
		"id": "50ae73be.69355c",
		"type": "ui_text",
		"z": "47b2f5dd.b4683c",
		"group": "82331602.bad968",
		"order": 3,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "RecipeNumberActive",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1320,
		"y": 380,
		"wires": []
	},
	{
		"id": "757ad4c1.24454c",
		"type": "mysql",
		"z": "47b2f5dd.b4683c",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1150,
		"y": 260,
		"wires": [
			[
				"17192afa.794735"
			]
		]
	},
	{
		"id": "339b6798.fc3a38",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "Machine Status",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\n    query = \"SELECT Status FROM CartoningMachineCommandWord WHERE CommandWord=\";\n    query += msg.payload;\n    query += \";\";\n  \nmsg.topic = query;\nmsg.payload = query;\nreturn msg;",
		"outputs": 2,
		"noerr": 0,
		"x": 1000,
		"y": 260,
		"wires": [
			[
				"757ad4c1.24454c"
			],
			[]
		]
	},
	{
		"id": "d5820495.b299e8",
		"type": "link in",
		"z": "47b2f5dd.b4683c",
		"name": "OPCUA_CartoningMachine_Data_OUT",
		"links": [
			"2d0edeee.1f61c2"
		],
		"x": 340,
		"y": 280,
		"wires": [
			[
				"b2afc303.f6a2",
				"cc464c1b.9d618",
				"2c3d40d1.69ee9",
				"2f944c79.dceb14",
				"bb16423d.67faf"
			]
		]
	},
	{
		"id": "2d0edeee.1f61c2",
		"type": "link out",
		"z": "d34333c5.293d8",
		"name": "OPCUA_CartoningMachine_Data_OUT",
		"links": [
			"d5820495.b299e8"
		],
		"x": 595,
		"y": 200,
		"wires": []
	},
	{
		"id": "1f1183c9.85713c",
		"type": "ui_text",
		"z": "b07f076e.8de3b8",
		"group": "678659e4.fa9658",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "RecipeNumberActive",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1180,
		"y": 400,
		"wires": []
	},
	{
		"id": "4e8cd0c6.aaaaa",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "28-FlowPackOutPut_RecipeNumberActive",
		"func": "msg.payload = msg.payload[28].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 510,
		"y": 400,
		"wires": [
			[
				"1f1183c9.85713c"
			]
		]
	},
	{
		"id": "9ca1458a.b99768",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "25-FlowPackOutPut_MachineStatus",
		"func": "//msg1 = { payload:\"ASSI DISABILITATI\" };\nmsg.payload = msg.payload[25].value.value;\n//if (msg.payload === \"7\") {\n//    return [msg1];\n//}\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 280,
		"wires": [
			[
				"bab48f48.f377e"
			]
		]
	},
	{
		"id": "8fb2390e.110a98",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "26-FlowPackOutPut_ActualSpeed",
		"func": "msg.payload = msg.payload[26].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 320,
		"wires": [
			[
				"210e0c9b.163d14"
			]
		]
	},
	{
		"id": "9947ed37.570a7",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "27-FlowPackOutPut_SpeedReference",
		"func": "msg.payload = msg.payload[27].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 360,
		"wires": [
			[
				"b4ad2dcc.73e99"
			]
		]
	},
	{
		"id": "d3214f72.c9023",
		"type": "ui_text",
		"z": "b07f076e.8de3b8",
		"group": "678659e4.fa9658",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "ActualSpeed",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1150,
		"y": 320,
		"wires": []
	},
	{
		"id": "430c32a0.8204cc",
		"type": "ui_text",
		"z": "b07f076e.8de3b8",
		"group": "678659e4.fa9658",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "SpeedReference",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1170,
		"y": 360,
		"wires": []
	},
	{
		"id": "29ce6b70.5676f4",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "24-FlowPackOutPut_StatusWord",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[24].value.value)\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 240,
		"wires": [
			[
				"50c5d462.d21f4c"
			]
		]
	},
	{
		"id": "478bf5db.ca587c",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "29-FlowPackOutPut_TotalPacksCount",
		"func": "msg.payload = msg.payload[29].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 440,
		"wires": [
			[
				"fb4052f3.79c73"
			]
		]
	},
	{
		"id": "fb4052f3.79c73",
		"type": "ui_text",
		"z": "b07f076e.8de3b8",
		"group": "678659e4.fa9658",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "TotalPacksCount",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1170,
		"y": 440,
		"wires": []
	},
	{
		"id": "2f0e1560.c0a1ea",
		"type": "link in",
		"z": "b07f076e.8de3b8",
		"name": "OPCUA_FlowPack_Data_OUT",
		"links": [
			"9b8bcae7.e49da8"
		],
		"x": 140,
		"y": 320,
		"wires": [
			[
				"29ce6b70.5676f4",
				"9ca1458a.b99768",
				"8fb2390e.110a98",
				"9947ed37.570a7",
				"4e8cd0c6.aaaaa",
				"478bf5db.ca587c"
			]
		]
	},
	{
		"id": "8683211f.9524b",
		"type": "link out",
		"z": "d34333c5.293d8",
		"name": "OPCUA_FlowPack_Data_OUT",
		"links": [
			"16005bd5.cd7344",
			"b0814e69.9b33a"
		],
		"x": 595,
		"y": 460,
		"wires": []
	},
	{
		"id": "bab48f48.f377e",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "Machine Status",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\n    query = \"SELECT Status FROM FlowpackCommandWord WHERE CommandWord=\";\n    query += msg.payload;\n    query += \";\";\n  \nmsg.topic = query;\nmsg.payload = query;\nreturn msg;",
		"outputs": 2,
		"noerr": 0,
		"x": 800,
		"y": 280,
		"wires": [
			[
				"1086e5b2.a7208a"
			],
			[]
		]
	},
	{
		"id": "1086e5b2.a7208a",
		"type": "mysql",
		"z": "b07f076e.8de3b8",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 970,
		"y": 280,
		"wires": [
			[
				"bd66b32d.ec65d"
			]
		]
	},
	{
		"id": "bd66b32d.ec65d",
		"type": "ui_text",
		"z": "b07f076e.8de3b8",
		"group": "678659e4.fa9658",
		"order": 4,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "MachineStatus",
		"format": "{{msg.payload[0].Status}}",
		"layout": "row-spread",
		"x": 1160,
		"y": 280,
		"wires": []
	},
	{
		"id": "2b0a005f.1089c",
		"type": "join",
		"z": "864446f5.ece2d8",
		"name": "TestJoin",
		"mode": "custom",
		"build": "array",
		"property": "payload",
		"propertyType": "msg",
		"key": "topic",
		"joiner": "\\n",
		"joinerType": "str",
		"accumulate": false,
		"timeout": "",
		"count": "16",
		"reduceRight": false,
		"reduceExp": "",
		"reduceInit": "",
		"reduceInitType": "",
		"reduceFixup": "",
		"x": 1140,
		"y": 400,
		"wires": [
			[
				"86a6c2e0.15e64"
			]
		]
	},
	{
		"id": "86a6c2e0.15e64",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1300,
		"y": 400,
		"wires": [
			[
				"8e84939b.ba017"
			]
		]
	},
	{
		"id": "8e84939b.ba017",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Query",
		"func": "array1= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM CartoningALM WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1470,
		"y": 400,
		"wires": [
			[
				"16f8e237.7b27be"
			]
		]
	},
	{
		"id": "574f0548.4c315c",
		"type": "mysql",
		"z": "864446f5.ece2d8",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1870,
		"y": 400,
		"wires": [
			[
				"8a97fb77.09a2f8"
			]
		]
	},
	{
		"id": "8a97fb77.09a2f8",
		"type": "ui_template",
		"z": "864446f5.ece2d8",
		"group": "82331602.bad968",
		"name": "tc0",
		"order": 7,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n    <th>ALM</th> \n    <th>STATUS</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ALM}}</td>\n    <td>{{msg.payload[$index].STATUS}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 2010,
		"y": 400,
		"wires": [
			[]
		]
	},
	{
		"id": "cf16087b.245d78",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "33-FlowPackAlarms_AlarmLINT0",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[33].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 80,
		"wires": [
			[
				"d8ec1a67.d13588"
			]
		]
	},
	{
		"id": "d8ec1a67.d13588",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 80,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "4eca3082.ff489",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "34-FlowPackAlarms_AlarmLINT4",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[34].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 120,
		"wires": [
			[
				"3a179bb9.e0f2c4"
			]
		]
	},
	{
		"id": "3a179bb9.e0f2c4",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 1;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 120,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "e7ae7dfc.db3b4",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "35-FlowPackAlarms_AlarmLINT8",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[35].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 160,
		"wires": [
			[
				"23a6ccd6.aa3a44"
			]
		]
	},
	{
		"id": "23a6ccd6.aa3a44",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 2;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 160,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "d506634d.a59a1",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "36-FlowPackAlarms_AlarmLINT12",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[36].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 200,
		"wires": [
			[
				"fece6d9e.89df2"
			]
		]
	},
	{
		"id": "fece6d9e.89df2",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 3;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 200,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "6576dd87.081094",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "37-FlowPackAlarms_AlarmLINT16",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[37].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 240,
		"wires": [
			[
				"20918164.71aa9e"
			]
		]
	},
	{
		"id": "20918164.71aa9e",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 4;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 240,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "ca3957e2.fc18d8",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 5;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 280,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "f4b7a490.bb34e8",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "38-FlowPackAlarms_AlarmLINT20",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[38].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 280,
		"wires": [
			[
				"ca3957e2.fc18d8"
			]
		]
	},
	{
		"id": "48d71035.b012d",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 6;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 320,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "30dd462a.a273ba",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "39-FlowPackAlarms_AlarmLINT24",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[39].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 320,
		"wires": [
			[
				"48d71035.b012d"
			]
		]
	},
	{
		"id": "73b36af3.8b1d44",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 7;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 940,
		"y": 360,
		"wires": [
			[
				"4958bbec.0ffab4"
			]
		],
		"outputLabels": [
			"payload"
		]
	},
	{
		"id": "f925824f.2663",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "40-FlowPackAlarms_AlarmLINT28",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[13].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[40].value.value[1])\n\n\n\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 360,
		"wires": [
			[
				"73b36af3.8b1d44"
			]
		]
	},
	{
		"id": "eeae30cc.c2169",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "41-FlowPackAlarms_AlarmLINT32",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[14].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[41].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 400,
		"wires": [
			[
				"54a46b19.8d43b4"
			]
		]
	},
	{
		"id": "c0a1c470.d50d08",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "42-FlowPackAlarms_AlarmLINT36",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[42].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 440,
		"wires": [
			[
				"a389705c.4fbc"
			]
		]
	},
	{
		"id": "a389705c.4fbc",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*9\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 440,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "54a46b19.8d43b4",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 8\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 940,
		"y": 400,
		"wires": [
			[
				"4958bbec.0ffab4"
			]
		],
		"outputLabels": [
			"payload"
		]
	},
	{
		"id": "6ad27a49.02c9c4",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "43-FlowPackAlarms_AlarmLINT40",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[43].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 480,
		"wires": [
			[
				"b510703d.dcd76"
			]
		]
	},
	{
		"id": "b510703d.dcd76",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*10\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    query = \"SELECT * FROM CartoningALM WHERE \";\n    query += myArray.join(\" or \");\n    query += \";\";\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 480,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "fa564160.2a653",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "44-FlowPackAlarms_AlarmLINT44",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[44].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 520,
		"wires": [
			[
				"8f23c973.9e2d88"
			]
		]
	},
	{
		"id": "8f23c973.9e2d88",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*11\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 520,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "539a1a7e.33d544",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "45-FlowPackAlarms_AlarmLINT48",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[45].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 560,
		"wires": [
			[
				"76ae3190.b34a6"
			]
		]
	},
	{
		"id": "76ae3190.b34a6",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*12\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 560,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "4a1741d1.18014",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "46-FlowPackAlarms_AlarmLINT52",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[46].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 600,
		"wires": [
			[
				"da7d8dab.0b5c6"
			]
		]
	},
	{
		"id": "da7d8dab.0b5c6",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*13;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 600,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "f03332ba.b02f4",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "47-FlowPackAlarms_AlarmLINT56",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[47].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 640,
		"wires": [
			[
				"da96e4f.069b218"
			]
		]
	},
	{
		"id": "da96e4f.069b218",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*14;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 640,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "a2f698cc.f514f8",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "48-FlowPackAlarms_AlarmLINT60",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[48].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 680,
		"wires": [
			[
				"1673e2fe.645f3d"
			]
		]
	},
	{
		"id": "1673e2fe.645f3d",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*15\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 940,
		"y": 680,
		"wires": [
			[
				"4958bbec.0ffab4"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "14328149.320dcf",
		"type": "link in",
		"z": "8ad94bc0.3a5ef8",
		"name": "OPCUA_CartoningMachine",
		"links": [
			"b5fd0584.069e58"
		],
		"x": 295,
		"y": 320,
		"wires": [
			[
				"cf16087b.245d78",
				"4eca3082.ff489",
				"e7ae7dfc.db3b4",
				"d506634d.a59a1",
				"6576dd87.081094",
				"f4b7a490.bb34e8",
				"30dd462a.a273ba",
				"f925824f.2663",
				"eeae30cc.c2169",
				"c0a1c470.d50d08",
				"6ad27a49.02c9c4",
				"fa564160.2a653",
				"539a1a7e.33d544",
				"4a1741d1.18014",
				"f03332ba.b02f4",
				"a2f698cc.f514f8",
				"bfc68eb0.8c38c8"
			]
		]
	},
	{
		"id": "4958bbec.0ffab4",
		"type": "join",
		"z": "8ad94bc0.3a5ef8",
		"name": "TestJoin",
		"mode": "custom",
		"build": "array",
		"property": "payload",
		"propertyType": "msg",
		"key": "topic",
		"joiner": "\\n",
		"joinerType": "str",
		"accumulate": false,
		"timeout": "",
		"count": "16",
		"reduceRight": false,
		"reduceExp": "",
		"reduceInit": "",
		"reduceInitType": "",
		"reduceFixup": "",
		"x": 1300,
		"y": 320,
		"wires": [
			[
				"eb360272.287e5"
			]
		]
	},
	{
		"id": "eb360272.287e5",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1500,
		"y": 320,
		"wires": [
			[
				"c9696b33.3eddc8"
			]
		]
	},
	{
		"id": "c9696b33.3eddc8",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Query",
		"func": "array1= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM FlowpackALM WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1710,
		"y": 320,
		"wires": [
			[
				"42ed63f9.d5d7ac"
			]
		]
	},
	{
		"id": "909da8da.484c88",
		"type": "mysql",
		"z": "8ad94bc0.3a5ef8",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 2050,
		"y": 320,
		"wires": [
			[
				"57dcb920.831db8"
			]
		]
	},
	{
		"id": "57dcb920.831db8",
		"type": "ui_template",
		"z": "8ad94bc0.3a5ef8",
		"group": "678659e4.fa9658",
		"name": "tc0",
		"order": 7,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n    <th>ALM</th> \n    <th>STATUS</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ALM}}</td>\n    <td>{{msg.payload[$index].STATUS}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 2190,
		"y": 320,
		"wires": [
			[]
		]
	},
	{
		"id": "a04db880.d96538",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "49-DistributionRowsAlarms_AlarmLINT0",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[49].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 100,
		"wires": [
			[
				"bdc3c553.7b5cb8"
			]
		]
	},
	{
		"id": "bdc3c553.7b5cb8",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 100,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "87423d2c.60a4c",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "50-DistributionRowsAlarms_AlarmLINT12",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[50].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 140,
		"wires": [
			[
				"e36c65a7.76bc78"
			]
		]
	},
	{
		"id": "e36c65a7.76bc78",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 3;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 140,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "56d36df4.8e3034",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "51-DistributionRowsAlarms_AlarmLINT16",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[35].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 180,
		"wires": [
			[
				"be95c791.82ceb8"
			]
		]
	},
	{
		"id": "be95c791.82ceb8",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 4;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 180,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "1805ddab.f71f72",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "52-DistributionRowsAlarms_AlarmLINT20",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[52].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 220,
		"wires": [
			[
				"50fab7fc.386958"
			]
		]
	},
	{
		"id": "50fab7fc.386958",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 5;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 220,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "9a8c7c46.db1b2",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "53-DistributionRowsAlarms_AlarmLINT24",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[53].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 260,
		"wires": [
			[
				"eddee98.4479418"
			]
		]
	},
	{
		"id": "eddee98.4479418",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 6;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 260,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "1a63117b.07e1cf",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 7;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 300,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "12189a7a.5d1e36",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "54-DistributionRowsAlarms_AlarmLINT28",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[54].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 300,
		"wires": [
			[
				"1a63117b.07e1cf"
			]
		]
	},
	{
		"id": "e473501f.325d",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 8;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 340,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "1ac0d387.5075ec",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "55-DistributionRowsAlarms_AlarmLINT32",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[55].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 340,
		"wires": [
			[
				"e473501f.325d"
			]
		]
	},
	{
		"id": "dec50b86.84a0b8",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 9;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 760,
		"y": 380,
		"wires": [
			[
				"4faad151.fbc71"
			]
		],
		"outputLabels": [
			"payload"
		]
	},
	{
		"id": "dc54cf2e.c0a66",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "56-DistributionRowsAlarms_AlarmLINT36",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[13].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[56].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 380,
		"wires": [
			[
				"dec50b86.84a0b8"
			]
		]
	},
	{
		"id": "69741499.aef33c",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "57-DistributionRowsAlarms_AlarmLINT4",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[14].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[57].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 420,
		"wires": [
			[
				"1fd10271.07882e"
			]
		]
	},
	{
		"id": "46d85c6e.2db624",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "58-DistributionRowsAlarms_AlarmLINT40",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[58].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 460,
		"wires": [
			[
				"9fc9e97a.488f98"
			]
		]
	},
	{
		"id": "9fc9e97a.488f98",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*10\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 460,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "1fd10271.07882e",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 1\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 760,
		"y": 420,
		"wires": [
			[
				"4faad151.fbc71"
			]
		],
		"outputLabels": [
			"payload"
		]
	},
	{
		"id": "f3abdd10.2f67c",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "59-DistributionRowsAlarms_AlarmLINT44",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[59].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 500,
		"wires": [
			[
				"347d0.362a0830c"
			]
		]
	},
	{
		"id": "347d0.362a0830c",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*11\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    query = \"SELECT * FROM CartoningALM WHERE \";\n    query += myArray.join(\" or \");\n    query += \";\";\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 500,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "8199c709.a9cf28",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "60-DistributionRowsAlarms_AlarmLINT48",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[60].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 540,
		"wires": [
			[
				"65261c23.b03764"
			]
		]
	},
	{
		"id": "65261c23.b03764",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*12\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 540,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "bb56fca8.ba4b",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "61-DistributionRowsAlarms_AlarmLINT52",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[61].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 580,
		"wires": [
			[
				"9e59d573.78cea8"
			]
		]
	},
	{
		"id": "9e59d573.78cea8",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*13\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 580,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "cf4a9a1c.b41a78",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "62-DistributionRowsAlarms_AlarmLINT56",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[62].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 620,
		"wires": [
			[
				"9be5ecd3.fffeb"
			]
		]
	},
	{
		"id": "9be5ecd3.fffeb",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*14;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 620,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "22873ec8.565ee2",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "63-DistributionRowsAlarms_AlarmLINT60",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[63].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 660,
		"wires": [
			[
				"6c1597d0.1e5048"
			]
		]
	},
	{
		"id": "6c1597d0.1e5048",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*15;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 660,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "66875f42.b028c",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "64-DistributionRowsAlarms_AlarmLINT8",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[64].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 700,
		"wires": [
			[
				"98cd6637.4d3838"
			]
		]
	},
	{
		"id": "98cd6637.4d3838",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*2\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 700,
		"wires": [
			[
				"4faad151.fbc71"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "32131dfb.0928b2",
		"type": "link in",
		"z": "b954fe2b.6f2d4",
		"name": "OPCUA_CartoningMachine",
		"links": [
			"9b8bcae7.e49da8"
		],
		"x": 155,
		"y": 340,
		"wires": [
			[
				"a04db880.d96538",
				"87423d2c.60a4c",
				"56d36df4.8e3034",
				"1805ddab.f71f72",
				"9a8c7c46.db1b2",
				"12189a7a.5d1e36",
				"1ac0d387.5075ec",
				"dc54cf2e.c0a66",
				"69741499.aef33c",
				"46d85c6e.2db624",
				"f3abdd10.2f67c",
				"8199c709.a9cf28",
				"bb56fca8.ba4b",
				"cf4a9a1c.b41a78",
				"22873ec8.565ee2",
				"66875f42.b028c"
			]
		]
	},
	{
		"id": "4faad151.fbc71",
		"type": "join",
		"z": "b954fe2b.6f2d4",
		"name": "TestJoin",
		"mode": "custom",
		"build": "array",
		"property": "payload",
		"propertyType": "msg",
		"key": "topic",
		"joiner": "\\n",
		"joinerType": "str",
		"accumulate": false,
		"timeout": "",
		"count": "16",
		"reduceRight": false,
		"reduceExp": "",
		"reduceInit": "",
		"reduceInitType": "",
		"reduceFixup": "",
		"x": 1120,
		"y": 340,
		"wires": [
			[
				"d63ec756.fadad8"
			]
		]
	},
	{
		"id": "d63ec756.fadad8",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1300,
		"y": 340,
		"wires": [
			[
				"778365e2.bbb93c"
			]
		]
	},
	{
		"id": "778365e2.bbb93c",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Query",
		"func": "array1= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM DistributionRowsALM WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1510,
		"y": 340,
		"wires": [
			[
				"b9a5f8a.f3c6108"
			]
		]
	},
	{
		"id": "1df202f4.4db19d",
		"type": "mysql",
		"z": "b954fe2b.6f2d4",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1930,
		"y": 340,
		"wires": [
			[
				"af9325e6.fd9dd8"
			]
		]
	},
	{
		"id": "af9325e6.fd9dd8",
		"type": "ui_template",
		"z": "b954fe2b.6f2d4",
		"group": "97cc174e.529a18",
		"name": "td0",
		"order": 4,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n    <th>ALM</th> \n    <th>STATUS</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ALM}}</td>\n    <td>{{msg.payload[$index].STATUS}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 2130,
		"y": 340,
		"wires": [
			[]
		]
	},
	{
		"id": "ded5ab0.40b5058",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "94-FillingUnitAlarms_AlarmLINT0",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[94].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 80,
		"wires": [
			[
				"c3733597.727d58"
			]
		]
	},
	{
		"id": "c3733597.727d58",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 80,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "dba330c4.0b4b9",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "95-FillingUnitAlarms_AlarmLINT12",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[95].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 120,
		"wires": [
			[
				"d47d0a7a.505e08"
			]
		]
	},
	{
		"id": "d47d0a7a.505e08",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 3;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 120,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "e6578fe9.733ed",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "96-FillingUnitAlarms_AlarmLINT16",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[96].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 160,
		"wires": [
			[
				"e6c09225.25716"
			]
		]
	},
	{
		"id": "e6c09225.25716",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 4;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 160,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "840c4f04.d382b",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "97-FillingUnitAlarms_AlarmLINT20",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[97].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 200,
		"wires": [
			[
				"ae2f85cc.e20ac8"
			]
		]
	},
	{
		"id": "ae2f85cc.e20ac8",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 5;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 200,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "d522be72.17cb3",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "98-FillingUnitAlarms_AlarmLINT24",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[98].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 240,
		"wires": [
			[
				"736c9091.3b6fa"
			]
		]
	},
	{
		"id": "736c9091.3b6fa",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 6;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 240,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "7c87a032.edc7d",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 7;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 280,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "5c733e5.36365c",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "99-FillingUnitAlarms_AlarmLINT28",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[99].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 280,
		"wires": [
			[
				"7c87a032.edc7d"
			]
		]
	},
	{
		"id": "50441467.10fa3c",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 8;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 320,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "85dd6e4a.fb615",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "100-FillingUnitAlarms_AlarmLINT32",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[100].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 320,
		"wires": [
			[
				"50441467.10fa3c"
			]
		]
	},
	{
		"id": "d4644ca8.47327",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 9;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 740,
		"y": 360,
		"wires": [
			[
				"37f2ca3b.826016"
			]
		],
		"outputLabels": [
			"payload"
		]
	},
	{
		"id": "763adc2c.442034",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "101-FillingUnitAlarms_AlarmLINT36",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[13].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[101].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 360,
		"wires": [
			[
				"d4644ca8.47327"
			]
		]
	},
	{
		"id": "14d964dd.68877b",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "102-FillingUnitAlarms_AlarmLINT4",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[14].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[102].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 400,
		"wires": [
			[
				"e8a379ef.64b7a8"
			]
		]
	},
	{
		"id": "3eb4a632.ea3e1a",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "103-FillingUnitAlarms_AlarmLINT40",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[103].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 440,
		"wires": [
			[
				"da96fd99.502de"
			]
		]
	},
	{
		"id": "da96fd99.502de",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*10\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 440,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "e8a379ef.64b7a8",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 1\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 740,
		"y": 400,
		"wires": [
			[
				"37f2ca3b.826016"
			]
		],
		"outputLabels": [
			"payload"
		]
	},
	{
		"id": "921f8f0d.83bfa",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "104-FillingUnitAlarms_AlarmLINT44",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[104].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 480,
		"wires": [
			[
				"22e02714.8679d8"
			]
		]
	},
	{
		"id": "22e02714.8679d8",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*11\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    query = \"SELECT * FROM CartoningALM WHERE \";\n    query += myArray.join(\" or \");\n    query += \";\";\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 480,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "be5f61bd.f8385",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "105-FillingUnitAlarms_AlarmLINT48",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[105].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 520,
		"wires": [
			[
				"84e55b53.7a7a58"
			]
		]
	},
	{
		"id": "84e55b53.7a7a58",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*12\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 520,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "e5d255cb.42c148",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "106-FillingUnitAlarms_AlarmLINT52",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[106].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 560,
		"wires": [
			[
				"ae13dcf4.2aa31"
			]
		]
	},
	{
		"id": "ae13dcf4.2aa31",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*13\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 560,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "6652473b.f59e68",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "107-FillingUnitAlarms_AlarmLINT56",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[107].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 600,
		"wires": [
			[
				"c90f9067.d6ef6"
			]
		]
	},
	{
		"id": "c90f9067.d6ef6",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*14;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 600,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "cd345b10.41b488",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "108-FillingUnitAlarms_AlarmLINT60",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[108].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 640,
		"wires": [
			[
				"ea52c1bf.e1a14"
			]
		]
	},
	{
		"id": "ea52c1bf.e1a14",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*15;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 640,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "c29fd8d2.d74968",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "109-FillingUnitAlarms_AlarmLINT8",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[109].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 440,
		"y": 680,
		"wires": [
			[
				"5c5a0ced.4b7794"
			]
		]
	},
	{
		"id": "5c5a0ced.4b7794",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*2\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 680,
		"wires": [
			[
				"37f2ca3b.826016"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "37589546.47af9a",
		"type": "link in",
		"z": "adfd884d.ed9118",
		"name": "OPCUA_CartoningMachine",
		"links": [
			"9b8bcae7.e49da8"
		],
		"x": 135,
		"y": 320,
		"wires": [
			[
				"ded5ab0.40b5058",
				"dba330c4.0b4b9",
				"e6578fe9.733ed",
				"840c4f04.d382b",
				"d522be72.17cb3",
				"5c733e5.36365c",
				"85dd6e4a.fb615",
				"763adc2c.442034",
				"14d964dd.68877b",
				"3eb4a632.ea3e1a",
				"921f8f0d.83bfa",
				"be5f61bd.f8385",
				"e5d255cb.42c148",
				"6652473b.f59e68",
				"cd345b10.41b488",
				"c29fd8d2.d74968"
			]
		]
	},
	{
		"id": "37f2ca3b.826016",
		"type": "join",
		"z": "adfd884d.ed9118",
		"name": "TestJoin",
		"mode": "custom",
		"build": "array",
		"property": "payload",
		"propertyType": "msg",
		"key": "topic",
		"joiner": "\\n",
		"joinerType": "str",
		"accumulate": false,
		"timeout": "",
		"count": "16",
		"reduceRight": false,
		"reduceExp": "",
		"reduceInit": "",
		"reduceInitType": "",
		"reduceFixup": "",
		"x": 1100,
		"y": 320,
		"wires": [
			[
				"a45e3d95.46df9"
			]
		]
	},
	{
		"id": "a45e3d95.46df9",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1280,
		"y": 320,
		"wires": [
			[
				"431d79a8.796708"
			]
		]
	},
	{
		"id": "431d79a8.796708",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Query",
		"func": "array1= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM FillingUnitALM WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1490,
		"y": 320,
		"wires": [
			[
				"4e7bc5db.72b86c"
			]
		]
	},
	{
		"id": "e444da71.702638",
		"type": "mysql",
		"z": "adfd884d.ed9118",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1850,
		"y": 320,
		"wires": [
			[
				"21a86cfc.3aa824"
			]
		]
	},
	{
		"id": "21a86cfc.3aa824",
		"type": "ui_template",
		"z": "adfd884d.ed9118",
		"group": "83c662a3.0a1a1",
		"name": "tt0",
		"order": 7,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n    <th>ALM</th> \n    <th>STATUS</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ALM}}</td>\n    <td>{{msg.payload[$index].STATUS}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 2070,
		"y": 320,
		"wires": [
			[]
		]
	},
	{
		"id": "42ed63f9.d5d7ac",
		"type": "switch",
		"z": "8ad94bc0.3a5ef8",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "ALM=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM FlowpackALM WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1830,
		"y": 320,
		"wires": [
			[
				"909da8da.484c88"
			],
			[
				"8b830931.4141f8"
			]
		]
	},
	{
		"id": "8b830931.4141f8",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM FlowpackALM WHERE ALM = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1950,
		"y": 400,
		"wires": [
			[
				"909da8da.484c88"
			]
		]
	},
	{
		"id": "b9a5f8a.f3c6108",
		"type": "switch",
		"z": "b954fe2b.6f2d4",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "ALM=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM DistributionRowsALM WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1630,
		"y": 340,
		"wires": [
			[
				"1df202f4.4db19d"
			],
			[
				"cce8114.53597f"
			]
		]
	},
	{
		"id": "cce8114.53597f",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM DistributionRowsALM WHERE ALM = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1770,
		"y": 380,
		"wires": [
			[
				"1df202f4.4db19d"
			]
		]
	},
	{
		"id": "4e7bc5db.72b86c",
		"type": "switch",
		"z": "adfd884d.ed9118",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "ALM=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM FillingUnitALM WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1630,
		"y": 320,
		"wires": [
			[
				"e444da71.702638"
			],
			[
				"3f222885.2058c8"
			]
		]
	},
	{
		"id": "3f222885.2058c8",
		"type": "function",
		"z": "adfd884d.ed9118",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM FillingUnitALM WHERE ALM = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1710,
		"y": 440,
		"wires": [
			[
				"e444da71.702638"
			]
		]
	},
	{
		"id": "77331a21.356f04",
		"type": "OPCUA-IIoT-Write",
		"z": "31a13872.0bad28",
		"connector": "bf2db24b.6e1e7",
		"name": "",
		"justValue": false,
		"showStatusActivities": false,
		"showErrors": false,
		"x": 1230,
		"y": 40,
		"wires": [
			[]
		]
	},
	{
		"id": "73cf3d76.183404",
		"type": "OPCUA-IIoT-Inject",
		"z": "31a13872.0bad28",
		"injectType": "write",
		"payload": "",
		"payloadType": "date",
		"topic": "",
		"repeat": "30",
		"crontab": "",
		"once": true,
		"startDelay": "",
		"name": "Ricette Cartonatrice",
		"addressSpaceItems": [
			{
				"name": "1-NJ_OPC_UA_CartoningMachineInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_CommandWord",
				"datatypeName": "UInt16"
			},
			{
				"name": "2-NJ_OPC_UA_CartoningMachineInput_RecipeNumberRequest",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeNumberRequest",
				"datatypeName": "Int32"
			},
			{
				"name": "3-NJ_OPC_UA_CartoningMachineInput_RecipeDescription1",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription1",
				"datatypeName": "Int32"
			},
			{
				"name": "4-NJ_OPC_UA_CartoningMachineInput_RecipeDescription2",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription2",
				"datatypeName": "Int32"
			},
			{
				"name": "5-NJ_OPC_UA_CartoningMachineInput_RecipeDescription3",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription3",
				"datatypeName": "Int32"
			},
			{
				"name": "6-NJ_OPC_UA_CartoningMachineInput_RecipeDescription4",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription4",
				"datatypeName": "Int32"
			},
			{
				"name": "7-NJ_OPC_UA_CartoningMachineInput_RecipeDescription5",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription5",
				"datatypeName": "Int32"
			},
			{
				"name": "8-NJ_OPC_UA_CartoningMachineInput_RecipeDescription6",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription6",
				"datatypeName": "Int32"
			},
			{
				"name": "9-NJ_OPC_UA_CartoningMachineInput_RecipeDescription7",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription7",
				"datatypeName": "Int32"
			},
			{
				"name": "10NJ_OPC_UA_CartoningMachineInput_RecipeDescription8",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription8",
				"datatypeName": "Int32"
			},
			{
				"name": "11-NJ_OPC_UA_CartoningMachineInput_RecipeDescription9",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription9",
				"datatypeName": "Int32"
			},
			{
				"name": "12-NJ_OPC_UA_CartoningMachineInput_RecipeDescription10",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_RecipeDescription10",
				"datatypeName": "Int32"
			},
			{
				"name": "13-NJ_OPC_UA_CartoningMachineInput_BatchCode1",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_BatchCode1",
				"datatypeName": "Int32"
			},
			{
				"name": "14-NJ_OPC_UA_CartoningMachineInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_BatchCode2",
				"datatypeName": "Int32"
			},
			{
				"name": "15-NJ_OPC_UA_CartoningMachineInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_BatchCode3",
				"datatypeName": "Int32"
			},
			{
				"name": "16-NJ_OPC_UA_CartoningMachineInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_BatchCode4",
				"datatypeName": "Int32"
			},
			{
				"name": "17-NJ_OPC_UA_CartoningMachineInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_BatchCode5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ProductionDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ProductionDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ProductionDate2",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ProductionDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ProductionDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ProductionDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ProductionDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ProductionDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ProductionDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ProductionDate5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ExpiryDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ExpiryDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ExpiryDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ExpiryDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ExpiryDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ExpiryDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ExpiryDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ExpiryDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_ExpiryDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_ExpiryDate5",
				"datatypeName": "Int32"
			}
		],
		"x": 160,
		"y": 40,
		"wires": [
			[
				"e0535b9.e2b1aa8"
			]
		]
	},
	{
		"id": "e0535b9.e2b1aa8",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Query_Function CartoningMachine",
		"func": "\nvar query;\n\nquery = \"SELECT * FROM Recipe_CartoningMachine WHERE ricevuto = 0\";\n    \nmsg.topic = query;\nmsg.payload = query;\n\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 500,
		"y": 40,
		"wires": [
			[
				"d2dd5540.6f6cd8"
			]
		]
	},
	{
		"id": "d2dd5540.6f6cd8",
		"type": "mysql",
		"z": "31a13872.0bad28",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 730,
		"y": 40,
		"wires": [
			[
				"6e363e19.588d6"
			]
		]
	},
	{
		"id": "6e363e19.588d6",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "CreatefroJson",
		"func": "//var myArray = [32,12,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128];\n//  var myArray = []; [32,29,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128]\nvar myArray = [];\nvar myArray1 = [];\n//for(i = 0; i<command.length; i++) {\n        \nmyArray1 = myArray.concat(msg.payload[0].CommandWord,msg.payload[0].IndexRecipe, msg.payload[0].NameReceipe, msg.payload[0].Lotto, msg.payload[0].DataProduzione, msg.payload[0].DataScadenza);\n\n    \nmsg.valuesToWrite = myArray1;\nmsg.valuesToWrite1 = myArray1;\nmsg.valuesToWrite2 = myArray1;\n//msg.valuesToWrite[2] = parola;\n//msg.valuesToWrite[3] = command;\n//msg.injectType = recipe;\nreturn msg;\n",
		"outputs": 1,
		"noerr": 0,
		"x": 900,
		"y": 40,
		"wires": [
			[
				"77331a21.356f04",
				"efa834d2.5a4cd8"
			]
		]
	},
	{
		"id": "efa834d2.5a4cd8",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Ricetta",
		"func": "var message = msg.valuesToWrite[2];\nvar messageLotto = msg.valuesToWrite[3];\nvar messageProduzione = msg.valuesToWrite[4];\nvar messageScadenza = msg.valuesToWrite[5];\nvar messageArray = [];\nvar messageLottoArray = [];\nvar messageProduzioneArray = [];\nvar messageScadenzaArray = [];\nvar myArray = [];\nvar myLottoArray = [];\nvar myProduzioneArray = [];\nvar myScadenzaArray = [];\nvar myArrayBin = [];\nvar myLottoArrayBin = [];\nvar myProduzioneArrayBin = [];\nvar myScadenzaArrayBin = [];\nvar myArrayBinConc = [];\nvar myLottoArrayBinConc = [];\nvar myProduzioneArrayBinConc = [];\nvar myScadenzaArrayBinConc = [];\nvar myArrayDecConc = [];\nvar myLottoArrayDecConc = [];\nvar myProduzioneArrayDecConc = [];\nvar myScadenzaArrayDecConc = [];\n\nfunction dec2bin(dec){\n    return (dec >>> 0).toString(2);\n}\nfunction bin2dec(bin){\n    return parseInt(bin, 2).toString(10);\n}\nvar zeroBin = dec2bin(0);\n\nfor(i = message.length-1; i<20; i++){\n        message = message.concat(' ')\n}\n\nfor(i = 0; i<20/2; i++){\n        messageArray[i] = message.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageArray.length; j++){\n    for(i = 0; i<2; i++){\n        myArray[i] = messageArray[j].charCodeAt(messageArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myArrayBin[i] = dec2bin(myArray[i])\n        for(k = myArrayBin[i].length; k<8; k++){\n            myArrayBin[i] = zeroBin + myArrayBin[i]\n        }\n    }\nmyArrayBinConc[j] = myArrayBin.join('');\nmyArrayDecConc[j] = bin2dec(myArrayBinConc[j]);\n\n}\n\nmsg.valuesToWrite2 = msg.valuesToWrite1[0];\nmsg.valuesToWrite3 = msg.valuesToWrite1[1];\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite3);\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite2);\n\n\n\n\nfor(i = messageLotto.length-1; i<10; i++){\n        messageLotto = messageLotto.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageLottoArray[i] = messageLotto.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageLottoArray.length; j++){\n    for(i = 0; i<2; i++){\n        myLottoArray[i] = messageLottoArray[j].charCodeAt(messageLottoArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myLottoArrayBin[i] = dec2bin(myLottoArray[i])\n        for(k = myLottoArrayBin[i].length; k<8; k++){\n            myLottoArrayBin[i] = zeroBin + myLottoArrayBin[i]\n        }\n    }\nmyLottoArrayBinConc[j] = myLottoArrayBin.join('');\nmyLottoArrayDecConc[j] = bin2dec(myLottoArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[12] = myLottoArrayDecConc[0];\nmyArrayDecConc[13] = myLottoArrayDecConc[1];\nmyArrayDecConc[14] = myLottoArrayDecConc[2];\nmyArrayDecConc[15] = myLottoArrayDecConc[3];\nmyArrayDecConc[16] = myLottoArrayDecConc[4];\n\n\n\n\n\nfor(i = messageProduzione.length-1; i<10; i++){\n        messageProduzione = messageProduzione.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageProduzioneArray[i] = messageProduzione.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageProduzioneArray.length; j++){\n    for(i = 0; i<2; i++){\n        myProduzioneArray[i] = messageProduzioneArray[j].charCodeAt(messageProduzioneArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myProduzioneArrayBin[i] = dec2bin(myProduzioneArray[i])\n        for(k = myProduzioneArrayBin[i].length; k<8; k++){\n            myProduzioneArrayBin[i] = zeroBin + myProduzioneArrayBin[i]\n        }\n    }\nmyProduzioneArrayBinConc[j] = myProduzioneArrayBin.join('');\nmyProduzioneArrayDecConc[j] = bin2dec(myProduzioneArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[17] = myProduzioneArrayDecConc[0];\nmyArrayDecConc[18] = myProduzioneArrayDecConc[1];\nmyArrayDecConc[19] = myProduzioneArrayDecConc[2];\nmyArrayDecConc[20] = myProduzioneArrayDecConc[3];\nmyArrayDecConc[21] = myProduzioneArrayDecConc[4];\n\n\n\n\nfor(i = messageScadenza.length-1; i<10; i++){\n        messageScadenza = messageScadenza.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageScadenzaArray[i] = messageScadenza.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageScadenzaArray.length; j++){\n    for(i = 0; i<2; i++){\n        myScadenzaArray[i] = messageScadenzaArray[j].charCodeAt(messageScadenzaArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myScadenzaArrayBin[i] = dec2bin(myScadenzaArray[i])\n        for(k = myScadenzaArrayBin[i].length; k<8; k++){\n            myScadenzaArrayBin[i] = zeroBin + myScadenzaArrayBin[i]\n        }\n    }\nmyScadenzaArrayBinConc[j] = myScadenzaArrayBin.join('');\nmyScadenzaArrayDecConc[j] = bin2dec(myScadenzaArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[22] = myScadenzaArrayDecConc[0];\nmyArrayDecConc[23] = myScadenzaArrayDecConc[1];\nmyArrayDecConc[24] = myScadenzaArrayDecConc[2];\nmyArrayDecConc[25] = myScadenzaArrayDecConc[3];\nmyArrayDecConc[26] = myScadenzaArrayDecConc[4];\n\n\n\n\n\nfor(j = 0; j<myArrayDecConc.length; j++){\n    myArrayDecConc[j] = parseInt(myArrayDecConc[j],10);\n}\nmsg.valuesToWrite = myArrayDecConc;\n//.unshift(msg.valuesToWrite1[0]);\nmsg.valuesToWrite2 = myArrayDecConc;\n\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 1080,
		"y": 80,
		"wires": [
			[
				"77331a21.356f04"
			]
		]
	},
	{
		"id": "fe282d34.17e81",
		"type": "ui_text",
		"z": "22eda08c.8fdef",
		"group": "38e45124.8ba21e",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "RecipeNumberActive",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1180,
		"y": 220,
		"wires": []
	},
	{
		"id": "81539905.c513a8",
		"type": "function",
		"z": "22eda08c.8fdef",
		"name": "91-TwinMachineOutPut_RecipeNumberActive",
		"func": "msg.payload = msg.payload[91].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 220,
		"wires": [
			[
				"fe282d34.17e81"
			]
		]
	},
	{
		"id": "70055675.70cb58",
		"type": "function",
		"z": "22eda08c.8fdef",
		"name": "90-TwinMachineOutPut_MachineStatus",
		"func": "//msg1 = { payload:\"ASSI DISABILITATI\" };\nmsg.payload = msg.payload[90].value.value;\n//if (msg.payload === \"7\") {\n//    return [msg1];\n//}\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 460,
		"y": 180,
		"wires": [
			[
				"884608be.6a7238"
			]
		]
	},
	{
		"id": "93d8692.6e5d698",
		"type": "function",
		"z": "22eda08c.8fdef",
		"name": "92-TwinMachineOutPut_StatusWord",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[92].value.value)\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 450,
		"y": 140,
		"wires": [
			[
				"5a628142.7d00b"
			]
		]
	},
	{
		"id": "b0814e69.9b33a",
		"type": "link in",
		"z": "22eda08c.8fdef",
		"name": "OPCUA_FlowPack_Data_OUT",
		"links": [
			"8683211f.9524b"
		],
		"x": 175,
		"y": 140,
		"wires": [
			[
				"93d8692.6e5d698",
				"70055675.70cb58",
				"81539905.c513a8",
				"756a1899.478ea8"
			]
		]
	},
	{
		"id": "884608be.6a7238",
		"type": "function",
		"z": "22eda08c.8fdef",
		"name": "Machine Status",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\n    query = \"SELECT Status FROM TwinMachineCommandWord WHERE CommandWord=\";\n    query += msg.payload;\n    query += \";\";\n  \nmsg.topic = query;\nmsg.payload = query;\nreturn msg;",
		"outputs": 2,
		"noerr": 0,
		"x": 820,
		"y": 180,
		"wires": [
			[
				"9d0f1049.c9d64"
			],
			[]
		]
	},
	{
		"id": "9d0f1049.c9d64",
		"type": "mysql",
		"z": "22eda08c.8fdef",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 990,
		"y": 180,
		"wires": [
			[
				"f707787.4942088"
			]
		]
	},
	{
		"id": "f707787.4942088",
		"type": "ui_text",
		"z": "22eda08c.8fdef",
		"group": "38e45124.8ba21e",
		"order": 4,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "MachineStatus",
		"format": "{{msg.payload[0].Status}}",
		"layout": "row-spread",
		"x": 1160,
		"y": 180,
		"wires": []
	},
	{
		"id": "1078e387.dda06c",
		"type": "ui_text",
		"z": "e2174f3.a10d5b",
		"group": "83c662a3.0a1a1",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "RecipeNumberActive",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1180,
		"y": 240,
		"wires": []
	},
	{
		"id": "12149b5e.584985",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "119-FillingUnitOutPut_RecipeNumberActive",
		"func": "msg.payload = msg.payload[119].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 490,
		"y": 240,
		"wires": [
			[
				"1078e387.dda06c"
			]
		]
	},
	{
		"id": "9f18925.6dece7",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "118-FillingUnitOutPut_MachineStatus",
		"func": "//msg1 = { payload:\"ASSI DISABILITATI\" };\nmsg.payload = msg.payload[118].value.value;\n//if (msg.payload === \"7\") {\n//    return [msg1];\n//}\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 470,
		"y": 160,
		"wires": [
			[
				"dbfa3a5.a13ccc8"
			]
		]
	},
	{
		"id": "75722016.a21e1",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "111-FillingUnitOutPut_ActualSpeed",
		"func": "msg.payload = msg.payload[111].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 460,
		"y": 200,
		"wires": [
			[
				"47f85a89.251c14"
			]
		]
	},
	{
		"id": "14b780d3.e4958f",
		"type": "ui_text",
		"z": "e2174f3.a10d5b",
		"group": "83c662a3.0a1a1",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "ActualSpeed",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1150,
		"y": 200,
		"wires": []
	},
	{
		"id": "b4a222a3.536c1",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "122-FillingUnitOutPut_StatusWord",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[122].value.value)\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 460,
		"y": 120,
		"wires": [
			[
				"f033f988.f649c8"
			]
		]
	},
	{
		"id": "e9f0904e.b51d3",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "121-FillingUnitOutPut_SpeedReference",
		"func": "msg.payload = msg.payload[121].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 280,
		"wires": [
			[
				"957d3cb5.a4ae7"
			]
		]
	},
	{
		"id": "59da3e4a.69eac",
		"type": "ui_text",
		"z": "e2174f3.a10d5b",
		"group": "83c662a3.0a1a1",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "SpeedReference",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1170,
		"y": 280,
		"wires": []
	},
	{
		"id": "16005bd5.cd7344",
		"type": "link in",
		"z": "e2174f3.a10d5b",
		"name": "OPCUA_FlowPack_Data_OUT",
		"links": [
			"8683211f.9524b"
		],
		"x": 135,
		"y": 180,
		"wires": [
			[
				"b4a222a3.536c1",
				"9f18925.6dece7",
				"75722016.a21e1",
				"12149b5e.584985",
				"e9f0904e.b51d3"
			]
		]
	},
	{
		"id": "dbfa3a5.a13ccc8",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "Machine Status",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\n    query = \"SELECT Status FROM FillingUnitCommandWord WHERE CommandWord=\";\n    query += msg.payload;\n    query += \";\";\n  \nmsg.topic = query;\nmsg.payload = query;\nreturn msg;",
		"outputs": 2,
		"noerr": 0,
		"x": 780,
		"y": 160,
		"wires": [
			[
				"b9d4ea69.e78cb8"
			],
			[]
		]
	},
	{
		"id": "b9d4ea69.e78cb8",
		"type": "mysql",
		"z": "e2174f3.a10d5b",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 990,
		"y": 160,
		"wires": [
			[
				"ce518ab3.4bbd38"
			]
		]
	},
	{
		"id": "ce518ab3.4bbd38",
		"type": "ui_text",
		"z": "e2174f3.a10d5b",
		"group": "83c662a3.0a1a1",
		"order": 4,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "MachineStatus",
		"format": "{{msg.payload[0].Status}}",
		"layout": "row-spread",
		"x": 1280,
		"y": 160,
		"wires": []
	},
	{
		"id": "b4ad2dcc.73e99",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "divide",
		"func": "//var result = parseFloat(num/100).toFixed(2);\nvar result = parseFloat(msg.payload/10).toFixed(2);\nmsg.payload = parseFloat(msg.payload/10).toFixed(1);\n\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 770,
		"y": 360,
		"wires": [
			[
				"430c32a0.8204cc"
			]
		]
	},
	{
		"id": "210e0c9b.163d14",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "divide",
		"func": "//var result = parseFloat(num/100).toFixed(2);\nvar result = parseFloat(msg.payload/10).toFixed(2);\nmsg.payload = parseFloat(msg.payload/10).toFixed(1);\n\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 770,
		"y": 320,
		"wires": [
			[
				"d3214f72.c9023"
			]
		]
	},
	{
		"id": "957d3cb5.a4ae7",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "divide",
		"func": "//var result = parseFloat(num/100).toFixed(2);\nvar result = parseFloat(msg.payload/10).toFixed(2);\nmsg.payload = parseFloat(msg.payload/10).toFixed(1);\n\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 750,
		"y": 280,
		"wires": [
			[
				"59da3e4a.69eac"
			]
		]
	},
	{
		"id": "47f85a89.251c14",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "divide",
		"func": "//var result = parseFloat(num/100).toFixed(2);\nvar result = parseFloat(msg.payload/10).toFixed(2);\nmsg.payload = parseFloat(msg.payload/10).toFixed(1);\n\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 750,
		"y": 200,
		"wires": [
			[
				"14b780d3.e4958f"
			]
		]
	},
	{
		"id": "7f453070.c4d6c",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "divide",
		"func": "//var result = parseFloat(num/100).toFixed(2);\nvar result = parseFloat(msg.payload/10).toFixed(2);\nmsg.payload = parseFloat(msg.payload/10).toFixed(1);\n\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 970,
		"y": 300,
		"wires": [
			[
				"23f6977e.fbe9d8"
			]
		]
	},
	{
		"id": "4c78986b.66cd18",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "divide",
		"func": "//var result = parseFloat(num/100).toFixed(2);\nvar result = parseFloat(msg.payload/10).toFixed(2);\nmsg.payload = parseFloat(msg.payload/10).toFixed(1);\n\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 970,
		"y": 340,
		"wires": [
			[
				"9654c00.e54c84"
			]
		]
	},
	{
		"id": "e10f4ad4.84e118",
		"type": "function",
		"z": 0,
		"name": "67-DistributionRowsOutPut_RecipeNumberActive",
		"func": "msg.payload = msg.payload[67].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 410,
		"y": 260,
		"wires": [
			[]
		]
	},
	{
		"id": "6ba004f7.9d1b5c",
		"type": "function",
		"z": 0,
		"name": "65-DistributionRowsInput_CommandWord",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2hex(msg.payload[65].value.value)\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 380,
		"y": 140,
		"wires": [
			[]
		]
	},
	{
		"id": "6ed45fbf.06512",
		"type": "function",
		"z": 0,
		"name": "66-DistributionRowsOutPut_MachineStatus",
		"func": "//msg1 = { payload:\"ASSI DISABILITATI\" };\nmsg.payload = msg.payload[66].value.value;\n//if (msg.payload === \"7\") {\n//    return [msg1];\n//}\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 390,
		"y": 220,
		"wires": [
			[
				"5c6d69ce.aea4a8"
			]
		]
	},
	{
		"id": "9d8b5267.24b4e",
		"type": "link in",
		"z": 0,
		"name": "OPCUA_FlowPack_Data_OUT",
		"links": [],
		"x": 95,
		"y": 180,
		"wires": [
			[
				"6ba004f7.9d1b5c",
				"6ed45fbf.06512",
				"e10f4ad4.84e118",
				"a46eca02.f429f8"
			]
		]
	},
	{
		"id": "5c6d69ce.aea4a8",
		"type": "function",
		"z": 0,
		"name": "Machine Status",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\n    query = \"SELECT Status FROM DistributionRowsCommandWord WHERE CommandWord=\";\n    query += msg.payload;\n    query += \";\";\n  \nmsg.topic = query;\nmsg.payload = query;\nreturn msg;",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 220,
		"wires": [
			[
				"f861ac6d.70c24"
			],
			[]
		]
	},
	{
		"id": "f861ac6d.70c24",
		"type": "mysql",
		"z": 0,
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 910,
		"y": 220,
		"wires": [
			[]
		]
	},
	{
		"id": "a46eca02.f429f8",
		"type": "function",
		"z": 0,
		"name": "68-DistributionRowsOutPut_StatusWord",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2hex(msg.payload[68].value.value)\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 380,
		"y": 180,
		"wires": [
			[]
		]
	},
	{
		"id": "5f0cc0b3.ef4e",
		"type": "OPCUA-IIoT-Inject",
		"z": "31a13872.0bad28",
		"injectType": "write",
		"payload": "",
		"payloadType": "date",
		"topic": "",
		"repeat": "30",
		"crontab": "",
		"once": true,
		"startDelay": "",
		"name": "Ricette Flowpack",
		"addressSpaceItems": [
			{
				"name": "1-NJ_OPC_UA_FlowpackInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_CommandWord",
				"datatypeName": "UInt16"
			},
			{
				"name": "2-NJ_OPC_UA_FlowpackInput_RecipeNumberRequest",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeNumberRequest",
				"datatypeName": "Int32"
			},
			{
				"name": "3-NJ_OPC_UA_FlowpackInput_RecipeDescription1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription1",
				"datatypeName": "Int32"
			},
			{
				"name": "4-NJ_OPC_UA_FlowpackInput_RecipeDescription2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription2",
				"datatypeName": "Int32"
			},
			{
				"name": "5-NJ_OPC_UA_FlowpackInput_RecipeDescription3",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription3",
				"datatypeName": "Int32"
			},
			{
				"name": "6-NJ_OPC_UA_FlowpackInput_RecipeDescription4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription4",
				"datatypeName": "Int32"
			},
			{
				"name": "7-NJ_OPC_UA_FlowpackInput_RecipeDescription5",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription5",
				"datatypeName": "Int32"
			},
			{
				"name": "8-NJ_OPC_UA_FlowpackInput_RecipeDescription6",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription6",
				"datatypeName": "Int32"
			},
			{
				"name": "9-NJ_OPC_UA_FlowpackInput_RecipeDescription7",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription7",
				"datatypeName": "Int32"
			},
			{
				"name": "10NJ_OPC_UA_FlowpackInput_RecipeDescription8",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription8",
				"datatypeName": "Int32"
			},
			{
				"name": "11-NJ_OPC_UA_FlowpackInput_RecipeDescription9",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription9",
				"datatypeName": "Int32"
			},
			{
				"name": "12-NJ_OPC_UA_FlowpackInput_RecipeDescription10",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_RecipeDescription10",
				"datatypeName": "Int32"
			},
			{
				"name": "13-NJ_OPC_UA_FlowpackInput_BatchCode1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_BatchCode1",
				"datatypeName": "Int32"
			},
			{
				"name": "14-NJ_OPC_UA_FlowpackInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_BatchCode2",
				"datatypeName": "Int32"
			},
			{
				"name": "15-NJ_OPC_UA_FlowpackInput_BatchCode3",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_BatchCode3",
				"datatypeName": "Int32"
			},
			{
				"name": "16-NJ_OPC_UA_FlowpackInput_BatchCode4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_BatchCode4",
				"datatypeName": "Int32"
			},
			{
				"name": "17-NJ_OPC_UA_FlowpackInput_BatchCode5",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_BatchCode5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ProductionDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ProductionDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ProductionDate2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ProductionDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ProductionDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ProductionDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ProductionDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ProductionDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ProductionDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ProductionDate5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ExpiryDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ExpiryDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ExpiryDate2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ExpiryDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ExpiryDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ExpiryDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ExpiryDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ExpiryDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_ExpiryDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_ExpiryDate5",
				"datatypeName": "Int32"
			}
		],
		"x": 150,
		"y": 120,
		"wires": [
			[
				"1aadebfb.ed1414"
			]
		]
	},
	{
		"id": "6688504e.b5d89",
		"type": "OPCUA-IIoT-Inject",
		"z": "31a13872.0bad28",
		"injectType": "write",
		"payload": "",
		"payloadType": "date",
		"topic": "",
		"repeat": "10",
		"crontab": "",
		"once": true,
		"startDelay": "",
		"name": "Ricette FillingUnit",
		"addressSpaceItems": [
			{
				"name": "1-NJ_OPC_UA_FillingUnitInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_CommandWord",
				"datatypeName": "UInt16"
			},
			{
				"name": "2-NJ_OPC_UA_FillingUnitInput_RecipeNumberRequest",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeNumberRequest",
				"datatypeName": "Int32"
			},
			{
				"name": "3-NJ_OPC_UA_FillingUnitInput_RecipeDescription1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription1",
				"datatypeName": "Int32"
			},
			{
				"name": "4-NJ_OPC_UA_FillingUnitInput_RecipeDescription2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription2",
				"datatypeName": "Int32"
			},
			{
				"name": "5-NJ_OPC_UA_FillingUnitInput_RecipeDescription3",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription3",
				"datatypeName": "Int32"
			},
			{
				"name": "6-NJ_OPC_UA_FillingUnitInput_RecipeDescription4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription4",
				"datatypeName": "Int32"
			},
			{
				"name": "7-NJ_OPC_UA_FillingUnitInput_RecipeDescription5",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription5",
				"datatypeName": "Int32"
			},
			{
				"name": "8-NJ_OPC_UA_FillingUnitInput_RecipeDescription6",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription6",
				"datatypeName": "Int32"
			},
			{
				"name": "9-NJ_OPC_UA_FillingUnitInput_RecipeDescription7",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription7",
				"datatypeName": "Int32"
			},
			{
				"name": "10NJ_OPC_UA_FillingUnitInput_RecipeDescription8",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription8",
				"datatypeName": "Int32"
			},
			{
				"name": "11-NJ_OPC_UA_FillingUnitInput_RecipeDescription9",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription9",
				"datatypeName": "Int32"
			},
			{
				"name": "12-NJ_OPC_UA_FillingUnitInput_RecipeDescription10",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_RecipeDescription10",
				"datatypeName": "Int32"
			},
			{
				"name": "13-NJ_OPC_UA_FillingUnitInput_BatchCode1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_BatchCode1",
				"datatypeName": "Int32"
			},
			{
				"name": "14-NJ_OPC_UA_FillingUnitInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_BatchCode2",
				"datatypeName": "Int32"
			},
			{
				"name": "15-NJ_OPC_UA_FillingUnitInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_BatchCode3",
				"datatypeName": "Int32"
			},
			{
				"name": "16-NJ_OPC_UA_FillingUnitInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_BatchCode4",
				"datatypeName": "Int32"
			},
			{
				"name": "17-NJ_OPC_UA_FillingUnitInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_BatchCode5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ProductionDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ProductionDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ProductionDate2",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ProductionDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ProductionDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ProductionDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ProductionDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ProductionDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ProductionDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ProductionDate5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ExpiryDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ExpiryDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ExpiryDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ExpiryDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ExpiryDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ExpiryDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ExpiryDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ExpiryDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_ExpiryDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_ExpiryDate5",
				"datatypeName": "Int32"
			}
		],
		"x": 160,
		"y": 200,
		"wires": [
			[
				"622718ee.886158"
			]
		]
	},
	{
		"id": "85a554c0.07e438",
		"type": "OPCUA-IIoT-Inject",
		"z": "31a13872.0bad28",
		"injectType": "write",
		"payload": "",
		"payloadType": "date",
		"topic": "",
		"repeat": "30",
		"crontab": "",
		"once": true,
		"startDelay": "",
		"name": "Ricette DistributionRows",
		"addressSpaceItems": [
			{
				"name": "1-NJ_OPC_UA_DistributionRowsInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_CommandWord",
				"datatypeName": "UInt16"
			},
			{
				"name": "2-NJ_OPC_UA_DistributionRowsInput_RecipeNumberRequest",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeNumberRequest",
				"datatypeName": "Int32"
			},
			{
				"name": "3-NJ_OPC_UA_DistributionRowsInput_RecipeDescription1",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription1",
				"datatypeName": "Int32"
			},
			{
				"name": "4-NJ_OPC_UA_DistributionRowsInput_RecipeDescription2",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription2",
				"datatypeName": "Int32"
			},
			{
				"name": "5-NJ_OPC_UA_DistributionRowsInput_RecipeDescription3",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription3",
				"datatypeName": "Int32"
			},
			{
				"name": "6-NJ_OPC_UA_DistributionRowsInput_RecipeDescription4",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription4",
				"datatypeName": "Int32"
			},
			{
				"name": "7-NJ_OPC_UA_DistributionRowsInput_RecipeDescription5",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription5",
				"datatypeName": "Int32"
			},
			{
				"name": "8-NJ_OPC_UA_DistributionRowsInput_RecipeDescription6",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription6",
				"datatypeName": "Int32"
			},
			{
				"name": "9-NJ_OPC_UA_DistributionRowsInput_RecipeDescription7",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription7",
				"datatypeName": "Int32"
			},
			{
				"name": "10NJ_OPC_UA_DistributionRowsInput_RecipeDescription8",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription8",
				"datatypeName": "Int32"
			},
			{
				"name": "11-NJ_OPC_UA_DistributionRowsInput_RecipeDescription9",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription9",
				"datatypeName": "Int32"
			},
			{
				"name": "12-NJ_OPC_UA_DistributionRowsInput_RecipeDescription10",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_RecipeDescription10",
				"datatypeName": "Int32"
			},
			{
				"name": "13-NJ_OPC_UA_DistributionRowsInput_BatchCode1",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_BatchCode1",
				"datatypeName": "Int32"
			},
			{
				"name": "14-NJ_OPC_UA_DistributionRowsInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_BatchCode2",
				"datatypeName": "Int32"
			},
			{
				"name": "15-NJ_OPC_UA_DistributionRowsInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_BatchCode3",
				"datatypeName": "Int32"
			},
			{
				"name": "16-NJ_OPC_UA_DistributionRowsInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_BatchCode4",
				"datatypeName": "Int32"
			},
			{
				"name": "17-NJ_OPC_UA_DistributionRowsInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_BatchCode5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ProductionDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ProductionDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ProductionDate2",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ProductionDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ProductionDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ProductionDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ProductionDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ProductionDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ProductionDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ProductionDate5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ExpiryDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ExpiryDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ExpiryDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ExpiryDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ExpiryDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ExpiryDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ExpiryDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ExpiryDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_ExpiryDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_ExpiryDate5",
				"datatypeName": "Int32"
			}
		],
		"x": 180,
		"y": 320,
		"wires": [
			[
				"ac2deb3f.b7eb18"
			]
		]
	},
	{
		"id": "13fa53bb.d1a18c",
		"type": "OPCUA-IIoT-Inject",
		"z": "31a13872.0bad28",
		"injectType": "write",
		"payload": "",
		"payloadType": "date",
		"topic": "",
		"repeat": "30",
		"crontab": "",
		"once": true,
		"startDelay": "",
		"name": "Ricette TwinMachine",
		"addressSpaceItems": [
			{
				"name": "1-NJ_OPC_UA_TwinMachineInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_CommandWord",
				"datatypeName": "UInt16"
			},
			{
				"name": "2-NJ_OPC_UA_TwinMachineInput_RecipeNumberRequest",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeNumberRequest",
				"datatypeName": "Int32"
			},
			{
				"name": "3-NJ_OPC_UA_TwinMachineInput_RecipeDescription1",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription1",
				"datatypeName": "Int32"
			},
			{
				"name": "4-NJ_OPC_UA_TwinMachineInput_RecipeDescription2",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription2",
				"datatypeName": "Int32"
			},
			{
				"name": "5-NJ_OPC_UA_TwinMachineInput_RecipeDescription3",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription3",
				"datatypeName": "Int32"
			},
			{
				"name": "6-NJ_OPC_UA_TwinMachineInput_RecipeDescription4",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription4",
				"datatypeName": "Int32"
			},
			{
				"name": "7-NJ_OPC_UA_TwinMachineInput_RecipeDescription5",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription5",
				"datatypeName": "Int32"
			},
			{
				"name": "8-NJ_OPC_UA_TwinMachineInput_RecipeDescription6",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription6",
				"datatypeName": "Int32"
			},
			{
				"name": "9-NJ_OPC_UA_TwinMachineInput_RecipeDescription7",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription7",
				"datatypeName": "Int32"
			},
			{
				"name": "10NJ_OPC_UA_TwinMachineInput_RecipeDescription8",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription8",
				"datatypeName": "Int32"
			},
			{
				"name": "11-NJ_OPC_UA_TwinMachineInput_RecipeDescription9",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription9",
				"datatypeName": "Int32"
			},
			{
				"name": "12-NJ_OPC_UA_TwinMachineInput_RecipeDescription10",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_RecipeDescription10",
				"datatypeName": "Int32"
			},
			{
				"name": "13-NJ_OPC_UA_TwinMachineInput_BatchCode1",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_BatchCode1",
				"datatypeName": "Int32"
			},
			{
				"name": "14-NJ_OPC_UA_TwinMachineInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_BatchCode2",
				"datatypeName": "Int32"
			},
			{
				"name": "15-NJ_OPC_UA_TwinMachineInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_BatchCode3",
				"datatypeName": "Int32"
			},
			{
				"name": "16-NJ_OPC_UA_TwinMachineInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_BatchCode4",
				"datatypeName": "Int32"
			},
			{
				"name": "17-NJ_OPC_UA_TwinMachineInput_BatchCode2",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_BatchCode5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ProductionDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ProductionDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ProductionDate2",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ProductionDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ProductionDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ProductionDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ProductionDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ProductionDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ProductionDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ProductionDate5",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ExpiryDate1",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ExpiryDate1",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ExpiryDate3",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ExpiryDate2",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ExpiryDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ExpiryDate3",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ExpiryDate4",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ExpiryDate4",
				"datatypeName": "Int32"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_ExpiryDate5",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_ExpiryDate5",
				"datatypeName": "Int32"
			}
		],
		"x": 170,
		"y": 400,
		"wires": [
			[
				"829a1fdf.ca1b8"
			]
		]
	},
	{
		"id": "1aadebfb.ed1414",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Query_Function Flowpack",
		"func": "var query;\nquery = \"SELECT * FROM Recipe_FLowPack WHERE ricevuto = 0\";\nmsg.topic = query;\nmsg.payload = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 470,
		"y": 120,
		"wires": [
			[
				"56760072.267df"
			]
		]
	},
	{
		"id": "ccaadaa4.1f48f8",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "CreatefroJson",
		"func": "//var myArray = [32,12,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128];\n//  var myArray = []; [32,29,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128]\nvar myArray = [];\nvar myArray1 = [];\n//for(i = 0; i<command.length; i++) {\n        \nmyArray1 = myArray.concat(msg.payload[0].CommandWord,msg.payload[0].IndexRecipe, msg.payload[0].NameReceipe, msg.payload[0].Lotto, msg.payload[0].DataProduzione, msg.payload[0].DataScadenza);\n\n    \nmsg.valuesToWrite = myArray1;\nmsg.valuesToWrite1 = myArray1;\nmsg.valuesToWrite2 = myArray1;\n//msg.valuesToWrite[2] = parola;\n//msg.valuesToWrite[3] = command;\n//msg.injectType = recipe;\nreturn msg;\n",
		"outputs": 1,
		"noerr": 0,
		"x": 900,
		"y": 120,
		"wires": [
			[
				"4e067b01.9eddb4",
				"77906a35.768214"
			]
		]
	},
	{
		"id": "56760072.267df",
		"type": "mysql",
		"z": "31a13872.0bad28",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 710,
		"y": 120,
		"wires": [
			[
				"ccaadaa4.1f48f8"
			]
		]
	},
	{
		"id": "77906a35.768214",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Ricetta",
		"func": "var message = msg.valuesToWrite[2];\nvar messageLotto = msg.valuesToWrite[3];\nvar messageProduzione = msg.valuesToWrite[4];\nvar messageScadenza = msg.valuesToWrite[5];\nvar messageArray = [];\nvar messageLottoArray = [];\nvar messageProduzioneArray = [];\nvar messageScadenzaArray = [];\nvar myArray = [];\nvar myLottoArray = [];\nvar myProduzioneArray = [];\nvar myScadenzaArray = [];\nvar myArrayBin = [];\nvar myLottoArrayBin = [];\nvar myProduzioneArrayBin = [];\nvar myScadenzaArrayBin = [];\nvar myArrayBinConc = [];\nvar myLottoArrayBinConc = [];\nvar myProduzioneArrayBinConc = [];\nvar myScadenzaArrayBinConc = [];\nvar myArrayDecConc = [];\nvar myLottoArrayDecConc = [];\nvar myProduzioneArrayDecConc = [];\nvar myScadenzaArrayDecConc = [];\n\nfunction dec2bin(dec){\n    return (dec >>> 0).toString(2);\n}\nfunction bin2dec(bin){\n    return parseInt(bin, 2).toString(10);\n}\nvar zeroBin = dec2bin(0);\n\nfor(i = message.length-1; i<20; i++){\n        message = message.concat(' ')\n}\n\nfor(i = 0; i<20/2; i++){\n        messageArray[i] = message.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageArray.length; j++){\n    for(i = 0; i<2; i++){\n        myArray[i] = messageArray[j].charCodeAt(messageArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myArrayBin[i] = dec2bin(myArray[i])\n        for(k = myArrayBin[i].length; k<8; k++){\n            myArrayBin[i] = zeroBin + myArrayBin[i]\n        }\n    }\nmyArrayBinConc[j] = myArrayBin.join('');\nmyArrayDecConc[j] = bin2dec(myArrayBinConc[j]);\n\n}\n\nmsg.valuesToWrite2 = msg.valuesToWrite1[0];\nmsg.valuesToWrite3 = msg.valuesToWrite1[1];\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite3);\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite2);\n\n\n\n\nfor(i = messageLotto.length-1; i<10; i++){\n        messageLotto = messageLotto.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageLottoArray[i] = messageLotto.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageLottoArray.length; j++){\n    for(i = 0; i<2; i++){\n        myLottoArray[i] = messageLottoArray[j].charCodeAt(messageLottoArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myLottoArrayBin[i] = dec2bin(myLottoArray[i])\n        for(k = myLottoArrayBin[i].length; k<8; k++){\n            myLottoArrayBin[i] = zeroBin + myLottoArrayBin[i]\n        }\n    }\nmyLottoArrayBinConc[j] = myLottoArrayBin.join('');\nmyLottoArrayDecConc[j] = bin2dec(myLottoArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[12] = myLottoArrayDecConc[0];\nmyArrayDecConc[13] = myLottoArrayDecConc[1];\nmyArrayDecConc[14] = myLottoArrayDecConc[2];\nmyArrayDecConc[15] = myLottoArrayDecConc[3];\nmyArrayDecConc[16] = myLottoArrayDecConc[4];\n\n\n\n\n\nfor(i = messageProduzione.length-1; i<10; i++){\n        messageProduzione = messageProduzione.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageProduzioneArray[i] = messageProduzione.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageProduzioneArray.length; j++){\n    for(i = 0; i<2; i++){\n        myProduzioneArray[i] = messageProduzioneArray[j].charCodeAt(messageProduzioneArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myProduzioneArrayBin[i] = dec2bin(myProduzioneArray[i])\n        for(k = myProduzioneArrayBin[i].length; k<8; k++){\n            myProduzioneArrayBin[i] = zeroBin + myProduzioneArrayBin[i]\n        }\n    }\nmyProduzioneArrayBinConc[j] = myProduzioneArrayBin.join('');\nmyProduzioneArrayDecConc[j] = bin2dec(myProduzioneArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[17] = myProduzioneArrayDecConc[0];\nmyArrayDecConc[18] = myProduzioneArrayDecConc[1];\nmyArrayDecConc[19] = myProduzioneArrayDecConc[2];\nmyArrayDecConc[20] = myProduzioneArrayDecConc[3];\nmyArrayDecConc[21] = myProduzioneArrayDecConc[4];\n\n\n\n\nfor(i = messageScadenza.length-1; i<10; i++){\n        messageScadenza = messageScadenza.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageScadenzaArray[i] = messageScadenza.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageScadenzaArray.length; j++){\n    for(i = 0; i<2; i++){\n        myScadenzaArray[i] = messageScadenzaArray[j].charCodeAt(messageScadenzaArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myScadenzaArrayBin[i] = dec2bin(myScadenzaArray[i])\n        for(k = myScadenzaArrayBin[i].length; k<8; k++){\n            myScadenzaArrayBin[i] = zeroBin + myScadenzaArrayBin[i]\n        }\n    }\nmyScadenzaArrayBinConc[j] = myScadenzaArrayBin.join('');\nmyScadenzaArrayDecConc[j] = bin2dec(myScadenzaArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[22] = myScadenzaArrayDecConc[0];\nmyArrayDecConc[23] = myScadenzaArrayDecConc[1];\nmyArrayDecConc[24] = myScadenzaArrayDecConc[2];\nmyArrayDecConc[25] = myScadenzaArrayDecConc[3];\nmyArrayDecConc[26] = myScadenzaArrayDecConc[4];\n\n\n\n\n\nfor(j = 0; j<myArrayDecConc.length; j++){\n    myArrayDecConc[j] = parseInt(myArrayDecConc[j],10);\n}\nmsg.valuesToWrite = myArrayDecConc;\n//.unshift(msg.valuesToWrite1[0]);\nmsg.valuesToWrite2 = myArrayDecConc;\n\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 1080,
		"y": 160,
		"wires": [
			[
				"4e067b01.9eddb4"
			]
		]
	},
	{
		"id": "4e067b01.9eddb4",
		"type": "OPCUA-IIoT-Write",
		"z": "31a13872.0bad28",
		"connector": "bf2db24b.6e1e7",
		"name": "",
		"justValue": true,
		"showStatusActivities": true,
		"showErrors": true,
		"x": 1230,
		"y": 120,
		"wires": [
			[]
		]
	},
	{
		"id": "622718ee.886158",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Query_Function FillingUnit",
		"func": "var query;\n\nquery = \"SELECT * FROM Recipe_FillingUnit WHERE ricevuto = 0\";\n\nmsg.topic = query;\nmsg.payload = query;\n\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 200,
		"wires": [
			[
				"9b7262ee.04b25"
			]
		]
	},
	{
		"id": "9b7262ee.04b25",
		"type": "mysql",
		"z": "31a13872.0bad28",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 710,
		"y": 200,
		"wires": [
			[
				"5971c83.d246a38"
			]
		]
	},
	{
		"id": "5971c83.d246a38",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "CreatefroJson",
		"func": "//var myArray = [32,12,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128];\n//  var myArray = []; [32,29,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128]\nvar myArray = [];\nvar myArray1 = [];\n//for(i = 0; i<command.length; i++) {\n        \nmyArray1 = myArray.concat(msg.payload[0].CommandWord,msg.payload[0].IndexRecipe, msg.payload[0].NameReceipe, msg.payload[0].Lotto, msg.payload[0].DataProduzione, msg.payload[0].DataScadenza);\n\n    \nmsg.valuesToWrite = myArray1;\nmsg.valuesToWrite1 = myArray1;\nmsg.valuesToWrite2 = myArray1;\n//msg.valuesToWrite[2] = parola;\n//msg.valuesToWrite[3] = command;\n//msg.injectType = recipe;\nreturn msg;\n",
		"outputs": 1,
		"noerr": 0,
		"x": 900,
		"y": 200,
		"wires": [
			[
				"78aeb4f8.ac3c9c",
				"f338b8ee.bb1048"
			]
		]
	},
	{
		"id": "f338b8ee.bb1048",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Ricetta",
		"func": "var message = msg.valuesToWrite[2];\nvar messageLotto = msg.valuesToWrite[3];\nvar messageProduzione = msg.valuesToWrite[4];\nvar messageScadenza = msg.valuesToWrite[5];\nvar messageArray = [];\nvar messageLottoArray = [];\nvar messageProduzioneArray = [];\nvar messageScadenzaArray = [];\nvar myArray = [];\nvar myLottoArray = [];\nvar myProduzioneArray = [];\nvar myScadenzaArray = [];\nvar myArrayBin = [];\nvar myLottoArrayBin = [];\nvar myProduzioneArrayBin = [];\nvar myScadenzaArrayBin = [];\nvar myArrayBinConc = [];\nvar myLottoArrayBinConc = [];\nvar myProduzioneArrayBinConc = [];\nvar myScadenzaArrayBinConc = [];\nvar myArrayDecConc = [];\nvar myLottoArrayDecConc = [];\nvar myProduzioneArrayDecConc = [];\nvar myScadenzaArrayDecConc = [];\n\nfunction dec2bin(dec){\n    return (dec >>> 0).toString(2);\n}\nfunction bin2dec(bin){\n    return parseInt(bin, 2).toString(10);\n}\nvar zeroBin = dec2bin(0);\n\nfor(i = message.length-1; i<20; i++){\n        message = message.concat(' ')\n}\n\nfor(i = 0; i<20/2; i++){\n        messageArray[i] = message.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageArray.length; j++){\n    for(i = 0; i<2; i++){\n        myArray[i] = messageArray[j].charCodeAt(messageArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myArrayBin[i] = dec2bin(myArray[i])\n        for(k = myArrayBin[i].length; k<8; k++){\n            myArrayBin[i] = zeroBin + myArrayBin[i]\n        }\n    }\nmyArrayBinConc[j] = myArrayBin.join('');\nmyArrayDecConc[j] = bin2dec(myArrayBinConc[j]);\n\n}\n\nmsg.valuesToWrite2 = msg.valuesToWrite1[0];\nmsg.valuesToWrite3 = msg.valuesToWrite1[1];\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite3);\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite2);\n\n\n\n\nfor(i = messageLotto.length-1; i<10; i++){\n        messageLotto = messageLotto.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageLottoArray[i] = messageLotto.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageLottoArray.length; j++){\n    for(i = 0; i<2; i++){\n        myLottoArray[i] = messageLottoArray[j].charCodeAt(messageLottoArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myLottoArrayBin[i] = dec2bin(myLottoArray[i])\n        for(k = myLottoArrayBin[i].length; k<8; k++){\n            myLottoArrayBin[i] = zeroBin + myLottoArrayBin[i]\n        }\n    }\nmyLottoArrayBinConc[j] = myLottoArrayBin.join('');\nmyLottoArrayDecConc[j] = bin2dec(myLottoArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[12] = myLottoArrayDecConc[0];\nmyArrayDecConc[13] = myLottoArrayDecConc[1];\nmyArrayDecConc[14] = myLottoArrayDecConc[2];\nmyArrayDecConc[15] = myLottoArrayDecConc[3];\nmyArrayDecConc[16] = myLottoArrayDecConc[4];\n\n\n\n\n\nfor(i = messageProduzione.length-1; i<10; i++){\n        messageProduzione = messageProduzione.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageProduzioneArray[i] = messageProduzione.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageProduzioneArray.length; j++){\n    for(i = 0; i<2; i++){\n        myProduzioneArray[i] = messageProduzioneArray[j].charCodeAt(messageProduzioneArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myProduzioneArrayBin[i] = dec2bin(myProduzioneArray[i])\n        for(k = myProduzioneArrayBin[i].length; k<8; k++){\n            myProduzioneArrayBin[i] = zeroBin + myProduzioneArrayBin[i]\n        }\n    }\nmyProduzioneArrayBinConc[j] = myProduzioneArrayBin.join('');\nmyProduzioneArrayDecConc[j] = bin2dec(myProduzioneArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[17] = myProduzioneArrayDecConc[0];\nmyArrayDecConc[18] = myProduzioneArrayDecConc[1];\nmyArrayDecConc[19] = myProduzioneArrayDecConc[2];\nmyArrayDecConc[20] = myProduzioneArrayDecConc[3];\nmyArrayDecConc[21] = myProduzioneArrayDecConc[4];\n\n\n\n\nfor(i = messageScadenza.length-1; i<10; i++){\n        messageScadenza = messageScadenza.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageScadenzaArray[i] = messageScadenza.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageScadenzaArray.length; j++){\n    for(i = 0; i<2; i++){\n        myScadenzaArray[i] = messageScadenzaArray[j].charCodeAt(messageScadenzaArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myScadenzaArrayBin[i] = dec2bin(myScadenzaArray[i])\n        for(k = myScadenzaArrayBin[i].length; k<8; k++){\n            myScadenzaArrayBin[i] = zeroBin + myScadenzaArrayBin[i]\n        }\n    }\nmyScadenzaArrayBinConc[j] = myScadenzaArrayBin.join('');\nmyScadenzaArrayDecConc[j] = bin2dec(myScadenzaArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[22] = myScadenzaArrayDecConc[0];\nmyArrayDecConc[23] = myScadenzaArrayDecConc[1];\nmyArrayDecConc[24] = myScadenzaArrayDecConc[2];\nmyArrayDecConc[25] = myScadenzaArrayDecConc[3];\nmyArrayDecConc[26] = myScadenzaArrayDecConc[4];\n\n\n\n\n\nfor(j = 0; j<myArrayDecConc.length; j++){\n    myArrayDecConc[j] = parseInt(myArrayDecConc[j],10);\n}\nmsg.valuesToWrite = myArrayDecConc;\n//.unshift(msg.valuesToWrite1[0]);\nmsg.valuesToWrite2 = myArrayDecConc;\n\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 1080,
		"y": 240,
		"wires": [
			[
				"78aeb4f8.ac3c9c"
			]
		]
	},
	{
		"id": "78aeb4f8.ac3c9c",
		"type": "OPCUA-IIoT-Write",
		"z": "31a13872.0bad28",
		"connector": "bf2db24b.6e1e7",
		"name": "",
		"justValue": true,
		"showStatusActivities": true,
		"showErrors": true,
		"x": 1230,
		"y": 200,
		"wires": [
			[]
		]
	},
	{
		"id": "ac2deb3f.b7eb18",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Query_Function DistributionRows",
		"func": "var query;\n\nquery = \"SELECT * FROM Recipe_DistribuitionRows WHERE ricevuto = 0\";\n   \nmsg.topic = query;\nmsg.payload = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 500,
		"y": 320,
		"wires": [
			[
				"fafa2190.034d"
			]
		]
	},
	{
		"id": "fafa2190.034d",
		"type": "mysql",
		"z": "31a13872.0bad28",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 730,
		"y": 320,
		"wires": [
			[
				"ba087f52.c957c"
			]
		]
	},
	{
		"id": "ba087f52.c957c",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "CreatefroJson",
		"func": "//var myArray = [32,12,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128];\n//  var myArray = []; [32,29,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128]\nvar myArray = [];\nvar myArray1 = [];\n//for(i = 0; i<command.length; i++) {\n        \nmyArray1 = myArray.concat(msg.payload[0].CommandWord,msg.payload[0].IndexRecipe, msg.payload[0].NameReceipe, msg.payload[0].Lotto, msg.payload[0].DataProduzione, msg.payload[0].DataScadenza);\n\n    \nmsg.valuesToWrite = myArray1;\nmsg.valuesToWrite1 = myArray1;\nmsg.valuesToWrite2 = myArray1;\n//msg.valuesToWrite[2] = parola;\n//msg.valuesToWrite[3] = command;\n//msg.injectType = recipe;\nreturn msg;\n",
		"outputs": 1,
		"noerr": 0,
		"x": 900,
		"y": 280,
		"wires": [
			[
				"5f34fe3a.7b23",
				"b192d9e1.4c8458"
			]
		]
	},
	{
		"id": "b192d9e1.4c8458",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Ricetta",
		"func": "var message = msg.valuesToWrite[2];\nvar messageLotto = msg.valuesToWrite[3];\nvar messageProduzione = msg.valuesToWrite[4];\nvar messageScadenza = msg.valuesToWrite[5];\nvar messageArray = [];\nvar messageLottoArray = [];\nvar messageProduzioneArray = [];\nvar messageScadenzaArray = [];\nvar myArray = [];\nvar myLottoArray = [];\nvar myProduzioneArray = [];\nvar myScadenzaArray = [];\nvar myArrayBin = [];\nvar myLottoArrayBin = [];\nvar myProduzioneArrayBin = [];\nvar myScadenzaArrayBin = [];\nvar myArrayBinConc = [];\nvar myLottoArrayBinConc = [];\nvar myProduzioneArrayBinConc = [];\nvar myScadenzaArrayBinConc = [];\nvar myArrayDecConc = [];\nvar myLottoArrayDecConc = [];\nvar myProduzioneArrayDecConc = [];\nvar myScadenzaArrayDecConc = [];\n\nfunction dec2bin(dec){\n    return (dec >>> 0).toString(2);\n}\nfunction bin2dec(bin){\n    return parseInt(bin, 2).toString(10);\n}\nvar zeroBin = dec2bin(0);\n\nfor(i = message.length-1; i<20; i++){\n        message = message.concat(' ')\n}\n\nfor(i = 0; i<20/2; i++){\n        messageArray[i] = message.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageArray.length; j++){\n    for(i = 0; i<2; i++){\n        myArray[i] = messageArray[j].charCodeAt(messageArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myArrayBin[i] = dec2bin(myArray[i])\n        for(k = myArrayBin[i].length; k<8; k++){\n            myArrayBin[i] = zeroBin + myArrayBin[i]\n        }\n    }\nmyArrayBinConc[j] = myArrayBin.join('');\nmyArrayDecConc[j] = bin2dec(myArrayBinConc[j]);\n\n}\n\nmsg.valuesToWrite2 = msg.valuesToWrite1[0];\nmsg.valuesToWrite3 = msg.valuesToWrite1[1];\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite3);\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite2);\n\n\n\n\nfor(i = messageLotto.length-1; i<10; i++){\n        messageLotto = messageLotto.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageLottoArray[i] = messageLotto.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageLottoArray.length; j++){\n    for(i = 0; i<2; i++){\n        myLottoArray[i] = messageLottoArray[j].charCodeAt(messageLottoArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myLottoArrayBin[i] = dec2bin(myLottoArray[i])\n        for(k = myLottoArrayBin[i].length; k<8; k++){\n            myLottoArrayBin[i] = zeroBin + myLottoArrayBin[i]\n        }\n    }\nmyLottoArrayBinConc[j] = myLottoArrayBin.join('');\nmyLottoArrayDecConc[j] = bin2dec(myLottoArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[12] = myLottoArrayDecConc[0];\nmyArrayDecConc[13] = myLottoArrayDecConc[1];\nmyArrayDecConc[14] = myLottoArrayDecConc[2];\nmyArrayDecConc[15] = myLottoArrayDecConc[3];\nmyArrayDecConc[16] = myLottoArrayDecConc[4];\n\n\n\n\n\nfor(i = messageProduzione.length-1; i<10; i++){\n        messageProduzione = messageProduzione.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageProduzioneArray[i] = messageProduzione.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageProduzioneArray.length; j++){\n    for(i = 0; i<2; i++){\n        myProduzioneArray[i] = messageProduzioneArray[j].charCodeAt(messageProduzioneArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myProduzioneArrayBin[i] = dec2bin(myProduzioneArray[i])\n        for(k = myProduzioneArrayBin[i].length; k<8; k++){\n            myProduzioneArrayBin[i] = zeroBin + myProduzioneArrayBin[i]\n        }\n    }\nmyProduzioneArrayBinConc[j] = myProduzioneArrayBin.join('');\nmyProduzioneArrayDecConc[j] = bin2dec(myProduzioneArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[17] = myProduzioneArrayDecConc[0];\nmyArrayDecConc[18] = myProduzioneArrayDecConc[1];\nmyArrayDecConc[19] = myProduzioneArrayDecConc[2];\nmyArrayDecConc[20] = myProduzioneArrayDecConc[3];\nmyArrayDecConc[21] = myProduzioneArrayDecConc[4];\n\n\n\n\nfor(i = messageScadenza.length-1; i<10; i++){\n        messageScadenza = messageScadenza.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageScadenzaArray[i] = messageScadenza.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageScadenzaArray.length; j++){\n    for(i = 0; i<2; i++){\n        myScadenzaArray[i] = messageScadenzaArray[j].charCodeAt(messageScadenzaArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myScadenzaArrayBin[i] = dec2bin(myScadenzaArray[i])\n        for(k = myScadenzaArrayBin[i].length; k<8; k++){\n            myScadenzaArrayBin[i] = zeroBin + myScadenzaArrayBin[i]\n        }\n    }\nmyScadenzaArrayBinConc[j] = myScadenzaArrayBin.join('');\nmyScadenzaArrayDecConc[j] = bin2dec(myScadenzaArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[22] = myScadenzaArrayDecConc[0];\nmyArrayDecConc[23] = myScadenzaArrayDecConc[1];\nmyArrayDecConc[24] = myScadenzaArrayDecConc[2];\nmyArrayDecConc[25] = myScadenzaArrayDecConc[3];\nmyArrayDecConc[26] = myScadenzaArrayDecConc[4];\n\n\n\n\n\nfor(j = 0; j<myArrayDecConc.length; j++){\n    myArrayDecConc[j] = parseInt(myArrayDecConc[j],10);\n}\nmsg.valuesToWrite = myArrayDecConc;\n//.unshift(msg.valuesToWrite1[0]);\nmsg.valuesToWrite2 = myArrayDecConc;\n\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 1080,
		"y": 320,
		"wires": [
			[
				"5f34fe3a.7b23"
			]
		]
	},
	{
		"id": "5f34fe3a.7b23",
		"type": "OPCUA-IIoT-Write",
		"z": "31a13872.0bad28",
		"connector": "bf2db24b.6e1e7",
		"name": "",
		"justValue": false,
		"showStatusActivities": false,
		"showErrors": false,
		"x": 1230,
		"y": 280,
		"wires": [
			[]
		]
	},
	{
		"id": "829a1fdf.ca1b8",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Query_Function TwinMachine",
		"func": "var query;\n\nquery = \"SELECT * FROM Recipe_TwinMachine WHERE ricevuto = 0\";\n   \nmsg.topic = query;\nmsg.payload = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 470,
		"y": 400,
		"wires": [
			[
				"527d6da0.19a2b4"
			]
		]
	},
	{
		"id": "527d6da0.19a2b4",
		"type": "mysql",
		"z": "31a13872.0bad28",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 710,
		"y": 400,
		"wires": [
			[
				"9f9938ad.7879f8"
			]
		]
	},
	{
		"id": "9f9938ad.7879f8",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "CreatefroJson",
		"func": "//var myArray = [32,12,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128];\n//  var myArray = []; [32,29,18770,17731,21588,8257,4128,4128,4128,4128,4128,4128]\nvar myArray = [];\nvar myArray1 = [];\n//for(i = 0; i<command.length; i++) {\n        \nmyArray1 = myArray.concat(msg.payload[0].CommandWord,msg.payload[0].IndexRecipe, msg.payload[0].NameReceipe, msg.payload[0].Lotto, msg.payload[0].DataProduzione, msg.payload[0].DataScadenza);\n\n    \nmsg.valuesToWrite = myArray1;\nmsg.valuesToWrite1 = myArray1;\nmsg.valuesToWrite2 = myArray1;\n//msg.valuesToWrite[2] = parola;\n//msg.valuesToWrite[3] = command;\n//msg.injectType = recipe;\nreturn msg;\n",
		"outputs": 1,
		"noerr": 0,
		"x": 900,
		"y": 380,
		"wires": [
			[
				"14f20988.1d58f6",
				"806b9aa1.250aa8"
			]
		]
	},
	{
		"id": "806b9aa1.250aa8",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "Ricetta",
		"func": "var message = msg.valuesToWrite[2];\nvar messageLotto = msg.valuesToWrite[3];\nvar messageProduzione = msg.valuesToWrite[4];\nvar messageScadenza = msg.valuesToWrite[5];\nvar messageArray = [];\nvar messageLottoArray = [];\nvar messageProduzioneArray = [];\nvar messageScadenzaArray = [];\nvar myArray = [];\nvar myLottoArray = [];\nvar myProduzioneArray = [];\nvar myScadenzaArray = [];\nvar myArrayBin = [];\nvar myLottoArrayBin = [];\nvar myProduzioneArrayBin = [];\nvar myScadenzaArrayBin = [];\nvar myArrayBinConc = [];\nvar myLottoArrayBinConc = [];\nvar myProduzioneArrayBinConc = [];\nvar myScadenzaArrayBinConc = [];\nvar myArrayDecConc = [];\nvar myLottoArrayDecConc = [];\nvar myProduzioneArrayDecConc = [];\nvar myScadenzaArrayDecConc = [];\n\nfunction dec2bin(dec){\n    return (dec >>> 0).toString(2);\n}\nfunction bin2dec(bin){\n    return parseInt(bin, 2).toString(10);\n}\nvar zeroBin = dec2bin(0);\n\nfor(i = message.length-1; i<20; i++){\n        message = message.concat(' ')\n}\n\nfor(i = 0; i<20/2; i++){\n        messageArray[i] = message.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageArray.length; j++){\n    for(i = 0; i<2; i++){\n        myArray[i] = messageArray[j].charCodeAt(messageArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myArrayBin[i] = dec2bin(myArray[i])\n        for(k = myArrayBin[i].length; k<8; k++){\n            myArrayBin[i] = zeroBin + myArrayBin[i]\n        }\n    }\nmyArrayBinConc[j] = myArrayBin.join('');\nmyArrayDecConc[j] = bin2dec(myArrayBinConc[j]);\n\n}\n\nmsg.valuesToWrite2 = msg.valuesToWrite1[0];\nmsg.valuesToWrite3 = msg.valuesToWrite1[1];\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite3);\nmsg.valuesToWrite = myArrayDecConc.unshift(msg.valuesToWrite2);\n\n\n\n\nfor(i = messageLotto.length-1; i<10; i++){\n        messageLotto = messageLotto.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageLottoArray[i] = messageLotto.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageLottoArray.length; j++){\n    for(i = 0; i<2; i++){\n        myLottoArray[i] = messageLottoArray[j].charCodeAt(messageLottoArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myLottoArrayBin[i] = dec2bin(myLottoArray[i])\n        for(k = myLottoArrayBin[i].length; k<8; k++){\n            myLottoArrayBin[i] = zeroBin + myLottoArrayBin[i]\n        }\n    }\nmyLottoArrayBinConc[j] = myLottoArrayBin.join('');\nmyLottoArrayDecConc[j] = bin2dec(myLottoArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[12] = myLottoArrayDecConc[0];\nmyArrayDecConc[13] = myLottoArrayDecConc[1];\nmyArrayDecConc[14] = myLottoArrayDecConc[2];\nmyArrayDecConc[15] = myLottoArrayDecConc[3];\nmyArrayDecConc[16] = myLottoArrayDecConc[4];\n\n\n\n\n\nfor(i = messageProduzione.length-1; i<10; i++){\n        messageProduzione = messageProduzione.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageProduzioneArray[i] = messageProduzione.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageProduzioneArray.length; j++){\n    for(i = 0; i<2; i++){\n        myProduzioneArray[i] = messageProduzioneArray[j].charCodeAt(messageProduzioneArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myProduzioneArrayBin[i] = dec2bin(myProduzioneArray[i])\n        for(k = myProduzioneArrayBin[i].length; k<8; k++){\n            myProduzioneArrayBin[i] = zeroBin + myProduzioneArrayBin[i]\n        }\n    }\nmyProduzioneArrayBinConc[j] = myProduzioneArrayBin.join('');\nmyProduzioneArrayDecConc[j] = bin2dec(myProduzioneArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[17] = myProduzioneArrayDecConc[0];\nmyArrayDecConc[18] = myProduzioneArrayDecConc[1];\nmyArrayDecConc[19] = myProduzioneArrayDecConc[2];\nmyArrayDecConc[20] = myProduzioneArrayDecConc[3];\nmyArrayDecConc[21] = myProduzioneArrayDecConc[4];\n\n\n\n\nfor(i = messageScadenza.length-1; i<10; i++){\n        messageScadenza = messageScadenza.concat(' ')\n}\n\nfor(i = 0; i<10/2; i++){\n        messageScadenzaArray[i] = messageScadenza.substring(2*i,2*(i+1))\n}\n\nfor(j = 0; j<messageScadenzaArray.length; j++){\n    for(i = 0; i<2; i++){\n        myScadenzaArray[i] = messageScadenzaArray[j].charCodeAt(messageScadenzaArray[j].length-1-i)\n        //myArrayBin[i] = \"00000000\"\n        myScadenzaArrayBin[i] = dec2bin(myScadenzaArray[i])\n        for(k = myScadenzaArrayBin[i].length; k<8; k++){\n            myScadenzaArrayBin[i] = zeroBin + myScadenzaArrayBin[i]\n        }\n    }\nmyScadenzaArrayBinConc[j] = myScadenzaArrayBin.join('');\nmyScadenzaArrayDecConc[j] = bin2dec(myScadenzaArrayBinConc[j]);\n\n}\n\nmyArrayDecConc[22] = myScadenzaArrayDecConc[0];\nmyArrayDecConc[23] = myScadenzaArrayDecConc[1];\nmyArrayDecConc[24] = myScadenzaArrayDecConc[2];\nmyArrayDecConc[25] = myScadenzaArrayDecConc[3];\nmyArrayDecConc[26] = myScadenzaArrayDecConc[4];\n\n\n\n\n\nfor(j = 0; j<myArrayDecConc.length; j++){\n    myArrayDecConc[j] = parseInt(myArrayDecConc[j],10);\n}\nmsg.valuesToWrite = myArrayDecConc;\n//.unshift(msg.valuesToWrite1[0]);\nmsg.valuesToWrite2 = myArrayDecConc;\n\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 1080,
		"y": 400,
		"wires": [
			[
				"14f20988.1d58f6"
			]
		]
	},
	{
		"id": "14f20988.1d58f6",
		"type": "OPCUA-IIoT-Write",
		"z": "31a13872.0bad28",
		"connector": "bf2db24b.6e1e7",
		"name": "",
		"justValue": false,
		"showStatusActivities": false,
		"showErrors": false,
		"x": 1230,
		"y": 360,
		"wires": [
			[]
		]
	},
	{
		"id": "dddbfa2b.cc6b78",
		"type": "OPCUA-IIoT-Inject",
		"z": "31a13872.0bad28",
		"injectType": "write",
		"payload": "",
		"payloadType": "date",
		"topic": "",
		"repeat": "10",
		"crontab": "",
		"once": true,
		"startDelay": "",
		"name": "Reset CommandWord",
		"addressSpaceItems": [
			{
				"name": "NJ_OPC_UA_CartoningMachineInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_CartoningMachineInput_CommandWord",
				"datatypeName": "UInt16"
			},
			{
				"name": "NJ_OPC_UA_FlowpackInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_FlowPackInput_CommandWord",
				"datatypeName": "UInt16"
			},
			{
				"name": "NJ_OPC_UA_FillingUnitInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_FillingUnitInput_CommandWord",
				"datatypeName": "UInt16"
			},
			{
				"name": "NJ_OPC_UA_DistributionRowsInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_DistributionRowsInput_CommandWord",
				"datatypeName": "UInt16"
			},
			{
				"name": "NJ_OPC_UA_TwinMachineInput_CommandWord",
				"nodeId": "ns=4;s=NJ_OPC_UA_TwinMachineInput_CommandWord",
				"datatypeName": "UInt16"
			}
		],
		"x": 170,
		"y": 500,
		"wires": [
			[
				"dd7543f0.2dca2"
			]
		]
	},
	{
		"id": "a1bc83a.664a88",
		"type": "OPCUA-IIoT-Write",
		"z": "31a13872.0bad28",
		"connector": "bf2db24b.6e1e7",
		"name": "",
		"justValue": false,
		"showStatusActivities": false,
		"showErrors": true,
		"x": 710,
		"y": 500,
		"wires": [
			[]
		]
	},
	{
		"id": "dd7543f0.2dca2",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "",
		"func": "msg.valuesToWrite = [0,0,0,0,0]\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 410,
		"y": 500,
		"wires": [
			[
				"a1bc83a.664a88"
			]
		]
	},
	{
		"id": "f29dd71c.6277c8",
		"type": "inject",
		"z": "31a13872.0bad28",
		"name": "",
		"topic": "",
		"payload": "",
		"payloadType": "str",
		"repeat": "180",
		"crontab": "",
		"once": false,
		"onceDelay": 0.1,
		"x": 210,
		"y": 640,
		"wires": [
			[
				"c38ab935.108ce8",
				"5d02b69f.878cf8",
				"45f511d.65f3bf",
				"22f26f0b.5c7a3",
				"d1a9a16e.fa68c"
			]
		]
	},
	{
		"id": "c38ab935.108ce8",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "",
		"func": "msg.topic = \"UPDATE `baldi`.`Recipe_CartoningMachine` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32\";\n//\"UPDATE `baldi`.`Recipe_DistribuitionRows` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_FillingUnit` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_FLowPack` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_TwinMachine` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\"];\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 470,
		"y": 620,
		"wires": [
			[
				"2f9efa25.92ea26"
			]
		]
	},
	{
		"id": "2f9efa25.92ea26",
		"type": "mysql",
		"z": "31a13872.0bad28",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 670,
		"y": 660,
		"wires": [
			[]
		]
	},
	{
		"id": "5d02b69f.878cf8",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "",
		"func": "msg.topic = \"UPDATE `baldi`.`Recipe_DistribuitionRows` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\";\n//\"UPDATE `baldi`.`Recipe_DistribuitionRows` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_FillingUnit` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_FLowPack` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_TwinMachine` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\"];\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 470,
		"y": 660,
		"wires": [
			[
				"2f9efa25.92ea26"
			]
		]
	},
	{
		"id": "45f511d.65f3bf",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "",
		"func": "msg.topic = \"UPDATE `baldi`.`Recipe_FillingUnit` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\";\n//\"UPDATE `baldi`.`Recipe_FLowPack` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_TwinMachine` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\"];\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 470,
		"y": 700,
		"wires": [
			[
				"2f9efa25.92ea26"
			]
		]
	},
	{
		"id": "22f26f0b.5c7a3",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "",
		"func": "msg.topic = \"UPDATE `baldi`.`Recipe_FLowPack` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\";\n//\"UPDATE `baldi`.`Recipe_TwinMachine` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\"];\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 470,
		"y": 740,
		"wires": [
			[
				"2f9efa25.92ea26"
			]
		]
	},
	{
		"id": "d1a9a16e.fa68c",
		"type": "function",
		"z": "31a13872.0bad28",
		"name": "",
		"func": "msg.topic = \"UPDATE `baldi`.`Recipe_TwinMachine` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\";\n//\"UPDATE `baldi`.`Recipe_DistribuitionRows` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_FillingUnit` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_FLowPack` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\",\"UPDATE `baldi`.`Recipe_TwinMachine` SET `CommandWord`='0', `Ricevuto`='1' Where `Ricevuto`=0 and `CommandWord`=32;\"];\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 470,
		"y": 780,
		"wires": [
			[
				"2f9efa25.92ea26"
			]
		]
	},
	{
		"id": "68de4b84.7f0c94",
		"type": "ui_text",
		"z": "6745f1f9.68b0a",
		"group": "97cc174e.529a18",
		"order": 2,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "RecipeNumberActive",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1140,
		"y": 300,
		"wires": []
	},
	{
		"id": "4459020.873b1",
		"type": "function",
		"z": "6745f1f9.68b0a",
		"name": "67-DistributionRowsOutPut_RecipeNumberActive",
		"func": "msg.payload = msg.payload[67].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 450,
		"y": 300,
		"wires": [
			[
				"68de4b84.7f0c94"
			]
		]
	},
	{
		"id": "121acc13.3d4614",
		"type": "function",
		"z": "6745f1f9.68b0a",
		"name": "66-DistributionRowsOutPut_MachineStatus",
		"func": "//msg1 = { payload:\"ASSI DISABILITATI\" };\nmsg.payload = msg.payload[66].value.value;\n//if (msg.payload === \"7\") {\n//    return [msg1];\n//}\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 430,
		"y": 260,
		"wires": [
			[
				"9574c06.e56144"
			]
		]
	},
	{
		"id": "a557a40c.8e6e08",
		"type": "link in",
		"z": "6745f1f9.68b0a",
		"name": "OPCUA_FlowPack_Data_OUT",
		"links": [
			"8683211f.9524b"
		],
		"x": 135,
		"y": 220,
		"wires": [
			[
				"121acc13.3d4614",
				"4459020.873b1",
				"9e424676.367f38"
			]
		]
	},
	{
		"id": "9574c06.e56144",
		"type": "function",
		"z": "6745f1f9.68b0a",
		"name": "Machine Status",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\n    query = \"SELECT Status FROM DistributionRowsCommandWord WHERE CommandWord=\";\n    query += msg.payload;\n    query += \";\";\n  \nmsg.topic = query;\nmsg.payload = query;\nreturn msg;",
		"outputs": 2,
		"noerr": 0,
		"x": 780,
		"y": 260,
		"wires": [
			[
				"31a33e55.991402"
			],
			[]
		]
	},
	{
		"id": "31a33e55.991402",
		"type": "mysql",
		"z": "6745f1f9.68b0a",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 950,
		"y": 260,
		"wires": [
			[
				"2fc999e3.1959b6"
			]
		]
	},
	{
		"id": "2fc999e3.1959b6",
		"type": "ui_text",
		"z": "6745f1f9.68b0a",
		"group": "97cc174e.529a18",
		"order": 1,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "MachineStatus",
		"format": "{{msg.payload[0].Status}}",
		"layout": "row-spread",
		"x": 1120,
		"y": 260,
		"wires": []
	},
	{
		"id": "9e424676.367f38",
		"type": "function",
		"z": "6745f1f9.68b0a",
		"name": "68-DistributionRowsOutPut_StatusWord",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[68].value.value)\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 420,
		"y": 220,
		"wires": [
			[
				"7ba056eb.601e68"
			]
		]
	},
	{
		"id": "7ba056eb.601e68",
		"type": "function",
		"z": "6745f1f9.68b0a",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('Status='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 740,
		"y": 220,
		"wires": [
			[
				"4805f4a1.4f898c"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "95d31d24.175f7",
		"type": "debug",
		"z": "6745f1f9.68b0a",
		"name": "ceck",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"x": 1910,
		"y": 140,
		"wires": []
	},
	{
		"id": "4805f4a1.4f898c",
		"type": "function",
		"z": "6745f1f9.68b0a",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 940,
		"y": 140,
		"wires": [
			[
				"e0fe8594.af2308"
			]
		]
	},
	{
		"id": "e0fe8594.af2308",
		"type": "function",
		"z": "6745f1f9.68b0a",
		"name": "Query",
		"func": "array1= msg.parts;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM StatusWord WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1110,
		"y": 140,
		"wires": [
			[
				"c43ae019.6dc22"
			]
		]
	},
	{
		"id": "c43ae019.6dc22",
		"type": "switch",
		"z": "6745f1f9.68b0a",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "Status=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM StatusWord WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1250,
		"y": 140,
		"wires": [
			[
				"bbce71be.92b5a"
			],
			[
				"a14e6f7b.02c4"
			]
		]
	},
	{
		"id": "a14e6f7b.02c4",
		"type": "function",
		"z": "6745f1f9.68b0a",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM StatusWord WHERE Status = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1410,
		"y": 200,
		"wires": [
			[
				"bbce71be.92b5a"
			]
		]
	},
	{
		"id": "bbce71be.92b5a",
		"type": "mysql",
		"z": "6745f1f9.68b0a",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1570,
		"y": 140,
		"wires": [
			[
				"600c1db0.53b0c4"
			]
		]
	},
	{
		"id": "600c1db0.53b0c4",
		"type": "ui_template",
		"z": "6745f1f9.68b0a",
		"group": "97cc174e.529a18",
		"name": "",
		"order": 5,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n     <th>Status</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ValueStatus}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 1740,
		"y": 140,
		"wires": [
			[]
		]
	},
	{
		"id": "50c5d462.d21f4c",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('Status='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 780,
		"y": 200,
		"wires": [
			[
				"70207a23.ada344"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "70207a23.ada344",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 980,
		"y": 120,
		"wires": [
			[
				"7c990d90.07c554"
			]
		]
	},
	{
		"id": "7c990d90.07c554",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "Query",
		"func": "array1= msg.parts;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM StatusWord WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1150,
		"y": 120,
		"wires": [
			[
				"7e88e6f9.cbfbc8"
			]
		]
	},
	{
		"id": "7e88e6f9.cbfbc8",
		"type": "switch",
		"z": "b07f076e.8de3b8",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "Status=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM StatusWord WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1290,
		"y": 120,
		"wires": [
			[
				"fed945e7.440298"
			],
			[
				"5c9f3b4f.fa9644"
			]
		]
	},
	{
		"id": "5c9f3b4f.fa9644",
		"type": "function",
		"z": "b07f076e.8de3b8",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM StatusWord WHERE Status = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1450,
		"y": 180,
		"wires": [
			[
				"fed945e7.440298"
			]
		]
	},
	{
		"id": "57ad448b.ee220c",
		"type": "ui_template",
		"z": "b07f076e.8de3b8",
		"group": "678659e4.fa9658",
		"name": "",
		"order": 0,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n     <th>Status</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ValueStatus}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 1780,
		"y": 120,
		"wires": [
			[]
		]
	},
	{
		"id": "fed945e7.440298",
		"type": "mysql",
		"z": "b07f076e.8de3b8",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1610,
		"y": 120,
		"wires": [
			[
				"57ad448b.ee220c"
			]
		]
	},
	{
		"id": "5a628142.7d00b",
		"type": "function",
		"z": "22eda08c.8fdef",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('Status='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 760,
		"y": 140,
		"wires": [
			[
				"5e0fc608.2fb3b8"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "5e0fc608.2fb3b8",
		"type": "function",
		"z": "22eda08c.8fdef",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 960,
		"y": 60,
		"wires": [
			[
				"a778e13e.e7425"
			]
		]
	},
	{
		"id": "a778e13e.e7425",
		"type": "function",
		"z": "22eda08c.8fdef",
		"name": "Query",
		"func": "array1= msg.parts;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM StatusWord WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1130,
		"y": 60,
		"wires": [
			[
				"2ffbf886.9a9228"
			]
		]
	},
	{
		"id": "2ffbf886.9a9228",
		"type": "switch",
		"z": "22eda08c.8fdef",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "Status=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM StatusWord WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1270,
		"y": 60,
		"wires": [
			[
				"f421b8d3.f18138"
			],
			[
				"2f46ef30.6d976"
			]
		]
	},
	{
		"id": "2f46ef30.6d976",
		"type": "function",
		"z": "22eda08c.8fdef",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM StatusWord WHERE Status = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1430,
		"y": 120,
		"wires": [
			[
				"f421b8d3.f18138"
			]
		]
	},
	{
		"id": "f421b8d3.f18138",
		"type": "mysql",
		"z": "22eda08c.8fdef",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1590,
		"y": 60,
		"wires": [
			[
				"ac86cbd1.64fd48"
			]
		]
	},
	{
		"id": "ac86cbd1.64fd48",
		"type": "ui_template",
		"z": "22eda08c.8fdef",
		"group": "38e45124.8ba21e",
		"name": "",
		"order": 0,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n     <th>Status</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ValueStatus}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 1760,
		"y": 60,
		"wires": [
			[]
		]
	},
	{
		"id": "f033f988.f649c8",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('Status='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 780,
		"y": 100,
		"wires": [
			[
				"717bb8ce.6d5db8"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "717bb8ce.6d5db8",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 980,
		"y": 20,
		"wires": [
			[
				"c2be4f79.7bffd"
			]
		]
	},
	{
		"id": "c2be4f79.7bffd",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "Query",
		"func": "array1= msg.parts;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM StatusWord WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1150,
		"y": 20,
		"wires": [
			[
				"e19568d4.e1c828"
			]
		]
	},
	{
		"id": "e19568d4.e1c828",
		"type": "switch",
		"z": "e2174f3.a10d5b",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "Status=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM StatusWord WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1290,
		"y": 20,
		"wires": [
			[
				"39d22d05.43b7a2"
			],
			[
				"991cb68f.9ade98"
			]
		]
	},
	{
		"id": "991cb68f.9ade98",
		"type": "function",
		"z": "e2174f3.a10d5b",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM StatusWord WHERE Status = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1450,
		"y": 80,
		"wires": [
			[
				"39d22d05.43b7a2"
			]
		]
	},
	{
		"id": "39d22d05.43b7a2",
		"type": "mysql",
		"z": "e2174f3.a10d5b",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1610,
		"y": 20,
		"wires": [
			[
				"e7ca7cf9.e31e3"
			]
		]
	},
	{
		"id": "e7ca7cf9.e31e3",
		"type": "ui_template",
		"z": "e2174f3.a10d5b",
		"group": "83c662a3.0a1a1",
		"name": "",
		"order": 0,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n     <th>Status</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ValueStatus}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 1780,
		"y": 20,
		"wires": [
			[]
		]
	},
	{
		"id": "7dda5d4b.3c4484",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('Status='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 1040,
		"y": 200,
		"wires": [
			[
				"403020af.68698"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "403020af.68698",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1240,
		"y": 120,
		"wires": [
			[
				"de1a1bc9.cd4d78"
			]
		]
	},
	{
		"id": "de1a1bc9.cd4d78",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "Query",
		"func": "array1= msg.parts;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM StatusWord WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1410,
		"y": 120,
		"wires": [
			[
				"60b6db12.a422b4"
			]
		]
	},
	{
		"id": "60b6db12.a422b4",
		"type": "switch",
		"z": "47b2f5dd.b4683c",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "Status=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM StatusWord WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1550,
		"y": 120,
		"wires": [
			[
				"501d4499.121ebc"
			],
			[
				"fe6a5490.16a898"
			]
		]
	},
	{
		"id": "fe6a5490.16a898",
		"type": "function",
		"z": "47b2f5dd.b4683c",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM StatusWord WHERE Status = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1710,
		"y": 180,
		"wires": [
			[
				"501d4499.121ebc"
			]
		]
	},
	{
		"id": "501d4499.121ebc",
		"type": "mysql",
		"z": "47b2f5dd.b4683c",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1870,
		"y": 120,
		"wires": [
			[
				"229fcb1a.507c54"
			]
		]
	},
	{
		"id": "229fcb1a.507c54",
		"type": "ui_template",
		"z": "47b2f5dd.b4683c",
		"group": "82331602.bad968",
		"name": "",
		"order": 0,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n     <th>Status</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ValueStatus}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 2040,
		"y": 120,
		"wires": [
			[]
		]
	},
	{
		"id": "756a1899.478ea8",
		"type": "function",
		"z": "22eda08c.8fdef",
		"name": "93-TwinMachineOutPut_TotalGlobalPacksCount",
		"func": "msg.payload = msg.payload[93].value.value\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 480,
		"y": 260,
		"wires": [
			[
				"691f40c9.94b3e"
			]
		]
	},
	{
		"id": "691f40c9.94b3e",
		"type": "ui_text",
		"z": "22eda08c.8fdef",
		"group": "38e45124.8ba21e",
		"order": 5,
		"width": 0,
		"height": 0,
		"name": "",
		"label": "TotalGlobalPacksCount",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1190,
		"y": 260,
		"wires": []
	},
	{
		"id": "75c1e051.8efe5",
		"type": "ui_text",
		"z": "6745f1f9.68b0a",
		"group": "97cc174e.529a18",
		"order": 3,
		"width": "4",
		"height": "4",
		"name": "1",
		"label": "",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1090,
		"y": 380,
		"wires": []
	},
	{
		"id": "b8f0f5bb.701178",
		"type": "ui_text",
		"z": "e2174f3.a10d5b",
		"group": "83c662a3.0a1a1",
		"order": 5,
		"width": "6",
		"height": "2",
		"name": "1",
		"label": "",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1070,
		"y": 360,
		"wires": []
	},
	{
		"id": "243e7316.318e3c",
		"type": "ui_text",
		"z": "47b2f5dd.b4683c",
		"group": "82331602.bad968",
		"order": 5,
		"width": "6",
		"height": "2",
		"name": "1",
		"label": "",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 1510,
		"y": 240,
		"wires": []
	},
	{
		"id": "e9ef4451.dddfe8",
		"type": "ui_text",
		"z": "22eda08c.8fdef",
		"group": "38e45124.8ba21e",
		"order": 5,
		"width": "7",
		"height": "3",
		"name": "1",
		"label": "",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 930,
		"y": 380,
		"wires": []
	},
	{
		"id": "13ebbcc7.217303",
		"type": "ui_text",
		"z": "b07f076e.8de3b8",
		"group": "678659e4.fa9658",
		"order": 5,
		"width": "7",
		"height": "1",
		"name": "1",
		"label": "",
		"format": "{{msg.payload}}",
		"layout": "row-spread",
		"x": 830,
		"y": 540,
		"wires": []
	},
	{
		"id": "e1136026.d7c59",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Old_Status",
		"func": "var myArrayStatus;\nvar mystring = msg.old;\n\nfunction isEmpty(obj) {\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n\nif(isEmpty()) {\n    for(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArrayStatus = myArrayStatus.concat('ALM='+ [value1], Date.now() / 1000 | 0);}\n    }\n   } else {\n    // Object is NOT empty\n}\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1160,
		"y": 200,
		"wires": [
			[]
		]
	},
	{
		"id": "65ccc05.86eb04",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Old_Status",
		"func": "var myArrayStatus;\nmystring = msg.parts;\nvar myArrayStatus = [];\n\nfunction isEmpty(obj) {\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n\nif(isEmpty()) {\n    for(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            // datenow = Date.now() / 1000 | 0;\n            myArrayStatus = myArrayStatus.concat('ALM='+ [value1]);}\n    }\n   } else {\n    // Object is NOT empty\n       // myArrayStatus = myArrayStatus.concat('stat='+ [value1]);}\n}\nmsg.payload = myArrayStatus;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1330,
		"y": 100,
		"wires": [
			[
				"34c136ab.c8077a"
			]
		]
	},
	{
		"id": "34c136ab.c8077a",
		"type": "debug",
		"z": "8ad94bc0.3a5ef8",
		"name": "old_statusflow",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"x": 1540,
		"y": 100,
		"wires": []
	},
	{
		"id": "9286a7e2.4556a8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 40,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "12a67f04.29bfe1",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "71-TwinMachineAlarms_AlarmLINT0",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[71].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 40,
		"wires": [
			[
				"9286a7e2.4556a8"
			]
		]
	},
	{
		"id": "1e6e2276.81558e",
		"type": "join",
		"z": "498f2a1d.a820e4",
		"name": "TestJoin",
		"mode": "custom",
		"build": "array",
		"property": "payload",
		"propertyType": "msg",
		"key": "topic",
		"joiner": "\\n",
		"joinerType": "str",
		"accumulate": false,
		"timeout": "",
		"count": "16",
		"reduceRight": false,
		"reduceExp": "",
		"reduceInit": "",
		"reduceInitType": "",
		"reduceFixup": "",
		"x": 1000,
		"y": 280,
		"wires": [
			[
				"d106033.73c23"
			]
		]
	},
	{
		"id": "ad4b8109.c7d16",
		"type": "link in",
		"z": "498f2a1d.a820e4",
		"name": "OPCUA_CartoningMachine",
		"links": [
			"9b8bcae7.e49da8"
		],
		"x": 35,
		"y": 280,
		"wires": [
			[
				"12a67f04.29bfe1",
				"7ead57f5.8c49d8",
				"d4c5b0e7.6be6d",
				"a1720615.757ce8",
				"fbfcfde4.ae254",
				"6247de58.f07bd",
				"c62c5cab.01003",
				"f2274431.ea96d8",
				"529b25dd.7fc3fc",
				"53476bdc.ab5fa4",
				"c1f97490.b34d78",
				"aec9fcff.a0b0c",
				"e78bd3da.25a96",
				"36b0b66.eab874a",
				"2c3ee2ef.361a6e",
				"91e13850.fc2038"
			]
		]
	},
	{
		"id": "ca619037.76471",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 3;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 80,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "745f30d6.fe489",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 4;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 120,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "b2e3bb14.a7d5c8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 5;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 160,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "df2c5cda.bec4d",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 6;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 200,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "9bb96d14.29875",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 7;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 240,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "8177d518.37e9b8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 8;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 280,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "9020694b.f75cc8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 9;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 320,
		"wires": [
			[
				"1e6e2276.81558e"
			]
		],
		"outputLabels": [
			"payload"
		]
	},
	{
		"id": "222c1049.39ada",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*10\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 400,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "99b536d3.c14db8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64 * 1\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 640,
		"y": 360,
		"wires": [
			[
				"1e6e2276.81558e"
			]
		],
		"outputLabels": [
			"payload"
		]
	},
	{
		"id": "eb29cf89.2f3fe",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*11\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    query = \"SELECT * FROM CartoningALM WHERE \";\n    query += myArray.join(\" or \");\n    query += \";\";\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 440,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "83f25d7d.5006f",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*12\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 480,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "b9011058.4f2f1",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*13\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 520,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "96bbfb6a.c2f328",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*14;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 560,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "ac498a4e.0e2888",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*15;\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;\n",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 600,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "caf1b5c9.cf5ec8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Decrypt&ParseQuery",
		"func": "mystring= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [];\nvar myArray1 = [];\n\nfor(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value + 64*2\n            myArray = myArray.concat('ALM='+ [value1]);}\n    }\n    //query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += myArray.join(\" or \");\n    //query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = myArray;\nmsg.payload = myArray;\nmsg.parts = myArray;\nreturn msg ;",
		"outputs": 2,
		"noerr": 0,
		"x": 640,
		"y": 640,
		"wires": [
			[
				"1e6e2276.81558e"
			],
			[]
		],
		"outputLabels": [
			"payload",
			"topic"
		]
	},
	{
		"id": "d106033.73c23",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "ArrayUtilsparts1",
		"func": "\nvar arr0 = msg.payload[0];\nvar arr1 = msg.payload[1];\nvar arr2 = msg.payload[2];\nvar arr3 = msg.payload[3];\nvar arr4 = msg.payload[4];\nvar arr5 = msg.payload[5];\nvar arr6 = msg.payload[6];\nvar arr7 = msg.payload[7];\nvar arr8 = msg.payload[8];\nvar arr9 = msg.payload[9];\nvar arr10 = msg.payload[10];\nvar arr11 = msg.payload[11];\nvar arr12 = msg.payload[12];\nvar arr13 = msg.payload[13];\nvar arr14 = msg.payload[14];\nvar arr15 = msg.payload[15];\n\nvar arr = [] ;\n\n\narr = arr.concat(arr0);\narr = arr.concat(arr1);\narr = arr.concat(arr2);\narr = arr.concat(arr3);\narr = arr.concat(arr4);\narr = arr.concat(arr5);\narr = arr.concat(arr6);\narr = arr.concat(arr7);\narr = arr.concat(arr8);\narr = arr.concat(arr9);\narr = arr.concat(arr10);\narr = arr.concat(arr11);\narr = arr.concat(arr12);\narr = arr.concat(arr13);\narr = arr.concat(arr14);\narr = arr.concat(arr15);\n\nmsg.payload = arr;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1180,
		"y": 280,
		"wires": [
			[
				"a3a90886.5bd9c8"
			]
		]
	},
	{
		"id": "7ead57f5.8c49d8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "72-TwinMachineAlarms_AlarmLINT12",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[72].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 80,
		"wires": [
			[
				"ca619037.76471"
			]
		]
	},
	{
		"id": "d4c5b0e7.6be6d",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "73-TwinMachineAlarms_AlarmLINT16",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[73].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 120,
		"wires": [
			[
				"745f30d6.fe489"
			]
		]
	},
	{
		"id": "a1720615.757ce8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "74-TwinMachineAlarms_AlarmLINT20",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[74].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 160,
		"wires": [
			[
				"b2e3bb14.a7d5c8"
			]
		]
	},
	{
		"id": "fbfcfde4.ae254",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "75-TwinMachineAlarms_AlarmLINT24",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[75].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 200,
		"wires": [
			[
				"df2c5cda.bec4d"
			]
		]
	},
	{
		"id": "6247de58.f07bd",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "76-TwinMachineAlarms_AlarmLINT28",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[76].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 240,
		"wires": [
			[
				"9bb96d14.29875"
			]
		]
	},
	{
		"id": "c62c5cab.01003",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "77-TwinMachineAlarms_AlarmLINT32",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[77].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 280,
		"wires": [
			[
				"8177d518.37e9b8"
			]
		]
	},
	{
		"id": "f2274431.ea96d8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "78-TwinMachineAlarms_AlarmLINT36",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[13].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[78].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 320,
		"wires": [
			[
				"9020694b.f75cc8"
			]
		]
	},
	{
		"id": "529b25dd.7fc3fc",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "79-TwinMachineAlarms_AlarmLINT4",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[14].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[79].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 360,
		"wires": [
			[
				"99b536d3.c14db8"
			]
		]
	},
	{
		"id": "53476bdc.ab5fa4",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "80-TwinMachineAlarms_AlarmLINT40",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[80].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 400,
		"wires": [
			[
				"222c1049.39ada"
			]
		]
	},
	{
		"id": "c1f97490.b34d78",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "81-TwinMachineAlarms_AlarmLINT44",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[81].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 440,
		"wires": [
			[
				"eb29cf89.2f3fe"
			]
		]
	},
	{
		"id": "aec9fcff.a0b0c",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "82-TwinMachineAlarms_AlarmLINT48",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[82].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 480,
		"wires": [
			[
				"83f25d7d.5006f"
			]
		]
	},
	{
		"id": "e78bd3da.25a96",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "83-TwinMachineAlarms_AlarmLINT52",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[83].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 520,
		"wires": [
			[
				"b9011058.4f2f1"
			]
		]
	},
	{
		"id": "36b0b66.eab874a",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "84-TwinMachineAlarms_AlarmLINT56",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[84].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 560,
		"wires": [
			[
				"96bbfb6a.c2f328"
			]
		]
	},
	{
		"id": "2c3ee2ef.361a6e",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "85-TwinMachineAlarms_AlarmLINT60",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[85].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 600,
		"wires": [
			[
				"ac498a4e.0e2888"
			]
		]
	},
	{
		"id": "91e13850.fc2038",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "86-TwinMachineAlarms_AlarmLINT8",
		"func": "(function(){\n\n    var ConvertBase = function (num) {\n        return {\n            from : function (baseFrom) {\n                return {\n                    to : function (baseTo) {\n                        return parseInt(num, baseFrom).toString(baseTo);\n                    }\n                };\n            }\n        };\n    };\n        \n    // binary to decimal\n    ConvertBase.bin2dec = function (num) {\n        return ConvertBase(num).from(2).to(10);\n    };\n    \n    // binary to hexadecimal\n    ConvertBase.bin2hex = function (num) {\n        return ConvertBase(num).from(2).to(16);\n    };\n    \n    // decimal to binary\n    ConvertBase.dec2bin = function (num) {\n        return ConvertBase(num).from(10).to(2);\n    };\n    \n    // decimal to hexadecimal\n    ConvertBase.dec2hex = function (num) {\n        return ConvertBase(num).from(10).to(16);\n    };\n    \n    // hexadecimal to binary\n    ConvertBase.hex2bin = function (num) {\n        return ConvertBase(num).from(16).to(2);\n    };\n    \n    // hexadecimal to decimal\n    ConvertBase.hex2dec = function (num) {\n        return ConvertBase(num).from(16).to(10);\n    };\n    \n    this.ConvertBase = ConvertBase;\n    \n})(this);\n\n//msg.payload = msg.payload[0].value.value\nmsg.payload = ConvertBase.dec2bin(msg.payload[86].value.value[1])\nreturn msg; ",
		"outputs": 1,
		"noerr": 0,
		"x": 350,
		"y": 640,
		"wires": [
			[
				"caf1b5c9.cf5ec8"
			]
		]
	},
	{
		"id": "a3a90886.5bd9c8",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Query",
		"func": "array1= msg.payload;\nmyCount = 0;\nvar query;\nvar query1;\nvar myArray = [ ];\nvar myArray1 = [ ];\nvar array = [ ];\nfor (var i=0; i<array1.length;i++) {\n//array.push({payload: array.value[i]\n   // query = \"SELECT * FROM CartoningALM WHERE \";\n    //query += array.join(\" or \");\n    //query += \";\"\n    \n}\n    query = \"SELECT * FROM TwinMachineALM WHERE \";\n    query += array1.join(\" or \");\n    query += \";\"\n//for(i = 0; i<array1.length; i++) {\n//        //if (mystring[i]==\"1\"){\n//        //    myCount++;\n//        //    value = mystring.length - i - 1;\n//        //    value1 = value + 64 * 2;\n//        myArray = array1[i];\n//    }\n//    query = \"SELECT * FROM CartoningALM WHERE \";\n//    query += myArray.join(\" or \");\n//    query += \";\";\n//            myArray1 = myArray1.concat([query]);    \nmsg.topic = query;\nmsg.payload = query;\n//msg.parts = query;\nreturn msg ;",
		"outputs": 1,
		"noerr": 0,
		"x": 1390,
		"y": 280,
		"wires": [
			[
				"bbf6eb6c.c4f218"
			]
		]
	},
	{
		"id": "bbf6eb6c.c4f218",
		"type": "switch",
		"z": "498f2a1d.a820e4",
		"name": "",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "cont",
				"v": "ALM=",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "SELECT * FROM TwinMachineALM WHERE ;",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": true,
		"outputs": 2,
		"x": 1530,
		"y": 280,
		"wires": [
			[
				"4d107b6d.12e6d4"
			],
			[
				"50b498f9.c47018"
			]
		]
	},
	{
		"id": "4d107b6d.12e6d4",
		"type": "mysql",
		"z": "498f2a1d.a820e4",
		"mydb": "62e49135.d6f58",
		"name": "",
		"x": 1850,
		"y": 280,
		"wires": [
			[
				"923c9a6a.2a8118"
			]
		]
	},
	{
		"id": "50b498f9.c47018",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Stringa NUlla",
		"func": "msg.topic = \"SELECT * FROM TwinMachineALM WHERE ALM = 1500;\" ;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1690,
		"y": 340,
		"wires": [
			[
				"4d107b6d.12e6d4"
			]
		]
	},
	{
		"id": "923c9a6a.2a8118",
		"type": "ui_template",
		"z": "498f2a1d.a820e4",
		"group": "38e45124.8ba21e",
		"name": "tt0",
		"order": 7,
		"width": "16",
		"height": "6",
		"format": "<table style=\"width:100%\">\n  <tr>\n    <th>ALM</th> \n    <th>STATUS</th> \n    </tr>\n  <tr ng-repeat=\"x in msg.payload | limitTo:20\">\n    <td>{{msg.payload[$index].ALM}}</td>\n    <td>{{msg.payload[$index].STATUS}}</td> \n      </tr>\n</table>",
		"storeOutMessages": true,
		"fwdInMessages": true,
		"templateScope": "local",
		"x": 2070,
		"y": 280,
		"wires": [
			[]
		]
	},
	{
		"id": "151480dd.1af2bf",
		"type": "debug",
		"z": "8ad94bc0.3a5ef8",
		"name": "flow",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"x": 1650,
		"y": 240,
		"wires": []
	},
	{
		"id": "db4ef83c.b8ef08",
		"type": "function",
		"z": "b954fe2b.6f2d4",
		"name": "Old_Status",
		"func": "var myArrayStatus;\nmystring = msg.parts;\n\nfunction isEmpty(obj) {\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n\nif(isEmpty()) {\n    for(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArrayStatus = myArrayStatus.concat('ALM='+ [value1], Date.now() / 1000 | 0);}\n    }\n   } else {\n    // Object is NOT empty\n}\nmsg.parts1 = myArrayStatus;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1170,
		"y": 98,
		"wires": [
			[
				"3b5cab60.a996f4"
			]
		]
	},
	{
		"id": "3b5cab60.a996f4",
		"type": "debug",
		"z": "b954fe2b.6f2d4",
		"name": "old_statusdist",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"x": 1380,
		"y": 98,
		"wires": []
	},
	{
		"id": "8102b78c.a21b28",
		"type": "function",
		"z": "498f2a1d.a820e4",
		"name": "Old_Status",
		"func": "var myArrayStatus;\nmystring = msg.parts;\n\nfunction isEmpty(obj) {\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n\nif(isEmpty()) {\n    for(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArrayStatus = myArrayStatus.concat('ALM='+ [value1], Date.now() / 1000 | 0);}\n    }\n   } else {\n    // Object is NOT empty\n}\nmsg.parts1 = myArrayStatus;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1230,
		"y": 80,
		"wires": [
			[
				"66aff945.95f878"
			]
		]
	},
	{
		"id": "66aff945.95f878",
		"type": "debug",
		"z": "498f2a1d.a820e4",
		"name": "old_statustwin",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"x": 1440,
		"y": 80,
		"wires": []
	},
	{
		"id": "5c71b864.465dd8",
		"type": "function",
		"z": "864446f5.ece2d8",
		"name": "Old_Status",
		"func": "var myArrayStatus;\nmystring = msg.parts;\n\nfunction isEmpty(obj) {\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n\nif(isEmpty()) {\n    for(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            myArrayStatus = myArrayStatus.concat('ALM='+ [value1], Date.now() / 1000 | 0);}\n    }\n   } else {\n    // Object is NOT empty\n}\nmsg.parts1 = myArrayStatus;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1190,
		"y": 620,
		"wires": [
			[
				"55499b33.9251f4"
			]
		]
	},
	{
		"id": "55499b33.9251f4",
		"type": "debug",
		"z": "864446f5.ece2d8",
		"name": "old_statuscart",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"x": 1400,
		"y": 620,
		"wires": []
	},
	{
		"id": "8559630d.833fd",
		"type": "debug",
		"z": "8ad94bc0.3a5ef8",
		"name": "old_statusflow1",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"x": 1460,
		"y": 600,
		"wires": []
	},
	{
		"id": "86664ad4.560db8",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "Old_Status",
		"func": "var myArrayStatus;\nmystring = msg.parts;\nmyArrayStatus = [];\n\nfunction isEmpty(obj) {\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key))\n            return false;\n    }\n    return true;\n}\n\n\nif(isEmpty()) {\n    for(i = 0; i<mystring.length; i++) {\n        if (mystring[i]==\"1\"){\n            myCount++;\n            value = mystring.length - i - 1;\n            value1 = value;\n            datenow = Date.now() / 1000 | 0;\n            myArrayStatus = myArrayStatus.concat('ALM='+ [value1], datenow);}\n    }\n   } else {\n    // Object is NOT empty\n        myArrayStatus = myArrayStatus.concat('stat='+ [value1], datenow);}\n}\nmsg.payload = myArrayStatus;\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 1250,
		"y": 600,
		"wires": [
			[
				"8559630d.833fd"
			]
		]
	},
	{
		"id": "bf31317c.ef1d28",
		"type": "debug",
		"z": "8ad94bc0.3a5ef8",
		"name": "",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"x": 240,
		"y": 500,
		"wires": []
	},
	{
		"id": "bfc68eb0.8c38c8",
		"type": "function",
		"z": "8ad94bc0.3a5ef8",
		"name": "",
		"func": "msg.parts = msg.payload[40].value.value[1];\nreturn msg;",
		"outputs": 1,
		"noerr": 0,
		"x": 320,
		"y": 640,
		"wires": [
			[
				"185f57a5.62d06"
			]
		]
	},
	{
		"id": "185f57a5.62d06",
		"type": "debug",
		"z": "8ad94bc0.3a5ef8",
		"name": "parts",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "parts",
		"x": 400,
		"y": 720,
		"wires": []
	}
]